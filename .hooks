{
  "Hooks": {
    "CanPatrolHeliSeePlayer (PatrolHelicopterAI_PlayerVisible)": "using UnityEngine;\r\n\r\npublic bool PlayerVisible(BasePlayer ply)\r\n{\r\n\tVector3 position = ply.eyes.position;\r\n\tif (TOD_Sky.Instance.IsNight && Vector3.Distance(position, interestZoneOrigin) > 40f)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tVector3 vector = base.transform.position - Vector3.up * 6f;\r\n\tfloat num = Vector3.Distance(position, vector);\r\n\tVector3 normalized = (position - vector).normalized;\r\n\tif (GamePhysics.Trace(new Ray(vector + normalized * 5f, normalized), 0f, out var hitInfo, num * 1.1f, 1218652417) && hitInfo.collider.gameObject.ToBaseEntity() == ply)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n",
    "OnChickenScared (OnChickenScared)": "using UnityEngine;\r\n\r\npublic override void StateEnter(BaseAIBrain brain, BaseEntity entity)\r\n{\r\n\tbase.StateEnter(brain, entity);\r\n\tBaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);\r\n\tif (baseEntity != null)\r\n\t{\r\n\t\tstopFleeDistance = Random.Range(80f, 100f) + Mathf.Clamp(Vector3Ex.Distance2D(brain.Navigator.transform.position, baseEntity.transform.position), 0f, 50f);\r\n\t}\r\n\tFleeFrom(brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot), entity);\r\n}\r\n",
    "OnEntitySpawn (BaseNetworkable_Spawn_OnEntitySpawn)": "using Network;\r\nusing Rust;\r\nusing UnityEngine;\r\n\r\npublic virtual void Spawn()\r\n{\r\n\tSpawnShared();\r\n\tif (net == null)\r\n\t{\r\n\t\tnet = Net.sv.CreateNetworkable();\r\n\t}\r\n\tcreationFrame = Time.frameCount;\r\n\tPreInitShared();\r\n\tInitShared();\r\n\tServerInit();\r\n\tPostInitShared();\r\n\tUpdateNetworkGroup();\r\n\tisSpawned = true;\r\n\tSendNetworkUpdateImmediate(justCreated: true);\r\n\tif (Rust.Application.isLoading && !Rust.Application.isLoadingSave)\r\n\t{\r\n\t\tbase.gameObject.SendOnSendNetworkUpdate(this as BaseEntity);\r\n\t}\r\n}\r\n",
    "OnJackieChan (OnJackieChan)": "using ConVar;\r\nusing Network;\r\nusing UnityEngine;\r\n\r\npublic void PlayerInit(Connection c)\r\n{\r\n\tusing (TimeWarning.New(\"PlayerInit\", 10))\r\n\t{\r\n\t\tCancelInvoke(base.KillMessage);\r\n\t\tSetPlayerFlag(PlayerFlags.Connected, b: true);\r\n\t\tactivePlayerList.Add(this);\r\n\t\tbots.Remove(this);\r\n\t\tuserID = c.userid;\r\n\t\tUserIDString = userID.ToString();\r\n\t\tdisplayName = c.username;\r\n\t\tc.player = this;\r\n\t\tcurrentTeam = RelationshipManager.ServerInstance.FindPlayersTeam(userID)?.teamID ?? 0;\r\n\t\tSingletonComponent<ServerMgr>.Instance.persistance.SetPlayerName(userID, displayName);\r\n\t\ttickInterpolator.Reset(base.transform.position);\r\n\t\ttickHistory.Reset(base.transform.position);\r\n\t\teyeHistory.Clear();\r\n\t\tlastTickTime = 0f;\r\n\t\tlastInputTime = 0f;\r\n\t\tSetPlayerFlag(PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\tstats.Init();\r\n\t\tInvokeRandomized(StatSave, Random.Range(5f, 10f), 30f, Random.Range(0f, 6f));\r\n\t\tpreviousLifeStory = SingletonComponent<ServerMgr>.Instance.persistance.GetLastLifeStory(userID);\r\n\t\tSetPlayerFlag(PlayerFlags.IsAdmin, c.authLevel != 0);\r\n\t\tSetPlayerFlag(PlayerFlags.IsDeveloper, DeveloperList.IsDeveloper(this));\r\n\t\tif (IsDead() && net.SwitchGroup(BaseNetworkable.LimboNetworkGroup))\r\n\t\t{\r\n\t\t\tSendNetworkGroupChange();\r\n\t\t}\r\n\t\tnet.OnConnected(c);\r\n\t\tnet.StartSubscriber();\r\n\t\tSendAsSnapshot(net.connection);\r\n\t\tClientRPCPlayer(null, this, \"StartLoading\");\r\n\t\tif ((bool)BaseGameMode.GetActiveGameMode(serverside: true))\r\n\t\t{\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnPlayerConnected(this);\r\n\t\t}\r\n\t\tif (net != null)\r\n\t\t{\r\n\t\t\tEACServer.OnStartLoading(net.connection);\r\n\t\t}\r\n\t\tif (IsAdmin)\r\n\t\t{\r\n\t\t\tif (ConVar.AntiHack.noclip_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.noclip_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.speedhack_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.speedhack_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.flyhack_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.flyhack_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.projectile_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.projectile_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.melee_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.melee_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.eye_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.eye_protection is disabled!\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnBasePlayerAttacked (BasePlayer_OnAttacked)": "using System.Collections.Generic;\r\nusing Facepunch;\r\nusing Rust;\r\nusing UnityEngine;\r\n\r\npublic override void OnAttacked(HitInfo info)\r\n{\r\n\tfloat oldHealth = base.health;\r\n\tif (InSafeZone() && !IsHostile() && info.Initiator != null && info.Initiator != this)\r\n\t{\r\n\t\tinfo.damageTypes.ScaleAll(0f);\r\n\t}\r\n\tif (base.isServer)\r\n\t{\r\n\t\tHitArea boneArea = info.boneArea;\r\n\t\tif (boneArea != (HitArea)(-1))\r\n\t\t{\r\n\t\t\tList<Item> obj = Pool.GetList<Item>();\r\n\t\t\tobj.AddRange(inventory.containerWear.itemList);\r\n\t\t\tfor (int i = 0; i < obj.Count; i++)\r\n\t\t\t{\r\n\t\t\t\tItem item = obj[i];\r\n\t\t\t\tif (item != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tItemModWearable component = item.info.GetComponent<ItemModWearable>();\r\n\t\t\t\t\tif (!(component == null) && component.ProtectsArea(boneArea))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\titem.OnAttacked(info);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tPool.FreeList(ref obj);\r\n\t\t\tinventory.ServerUpdate(0f);\r\n\t\t}\r\n\t}\r\n\tbase.OnAttacked(info);\r\n\tif (base.isServer && base.isServer && info.hasDamage)\r\n\t{\r\n\t\tif (!info.damageTypes.Has(DamageType.Bleeding) && info.damageTypes.IsBleedCausing() && !IsWounded() && !IsImmortalTo(info))\r\n\t\t{\r\n\t\t\tmetabolism.bleeding.Add(info.damageTypes.Total() * 0.2f);\r\n\t\t}\r\n\t\tif (isMounted)\r\n\t\t{\r\n\t\t\tGetMounted().MounteeTookDamage(this, info);\r\n\t\t}\r\n\t\tCheckDeathCondition(info);\r\n\t\tif (net != null && net.connection != null)\r\n\t\t{\r\n\t\t\tClientRPCPlayer(null, this, \"TakeDamageHit\");\r\n\t\t}\r\n\t\tstring text = StringPool.Get(info.HitBone);\r\n\t\tbool flag = Vector3.Dot((info.PointEnd - info.PointStart).normalized, eyes.BodyForward()) > 0.4f;\r\n\t\tBasePlayer initiatorPlayer = info.InitiatorPlayer;\r\n\t\tif ((bool)initiatorPlayer && !info.damageTypes.IsMeleeType())\r\n\t\t{\r\n\t\t\tinitiatorPlayer.LifeStoryShotHit(info.Weapon);\r\n\t\t}\r\n\t\tif (info.isHeadshot)\r\n\t\t{\r\n\t\t\tif (flag)\r\n\t\t\t{\r\n\t\t\t\tSignalBroadcast(Signal.Flinch_RearHead, string.Empty);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tSignalBroadcast(Signal.Flinch_Head, string.Empty);\r\n\t\t\t}\r\n\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/headshot.prefab\", this, 0u, new Vector3(0f, 2f, 0f), Vector3.zero, (initiatorPlayer != null) ? initiatorPlayer.net.connection : null);\r\n\t\t\tif ((bool)initiatorPlayer)\r\n\t\t\t{\r\n\t\t\t\tinitiatorPlayer.stats.Add(\"headshot\", 1, (Stats)5);\r\n\t\t\t\tif (initiatorPlayer.IsBeingSpectated)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (BaseEntity child in initiatorPlayer.children)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (child is BasePlayer basePlayer)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbasePlayer.ClientRPCPlayer(null, basePlayer, \"SpectatedPlayerHeadshot\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (flag)\r\n\t\t{\r\n\t\t\tSignalBroadcast(Signal.Flinch_RearTorso, string.Empty);\r\n\t\t}\r\n\t\telse if (text == \"spine\" || text == \"spine2\")\r\n\t\t{\r\n\t\t\tSignalBroadcast(Signal.Flinch_Stomach, string.Empty);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSignalBroadcast(Signal.Flinch_Chest, string.Empty);\r\n\t\t}\r\n\t}\r\n\tif (stats != null)\r\n\t{\r\n\t\tif (IsWounded())\r\n\t\t{\r\n\t\t\tstats.combat.LogAttack(info, \"wounded\", oldHealth);\r\n\t\t}\r\n\t\telse if (IsDead())\r\n\t\t{\r\n\t\t\tstats.combat.LogAttack(info, \"killed\", oldHealth);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstats.combat.LogAttack(info, \"\", oldHealth);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnGrowableUpdate (GrowableEntity_RunUpdate)": "private void RunUpdate()\r\n{\r\n\tif (!IsDead())\r\n\t{\r\n\t\tCalculateQualities(firstTime: false);\r\n\t\tfloat overallQuality = CalculateOverallQuality();\r\n\t\tfloat actualStageAgeIncrease = UpdateAge(overallQuality);\r\n\t\tUpdateHealthAndYield(overallQuality, actualStageAgeIncrease);\r\n\t\tif (base.health <= 0f)\r\n\t\t{\r\n\t\t\tDie();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUpdateState();\r\n\t\tConsumeWater();\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n}\r\n",
    "OnHorseDung (GrowableEntity_DoDung)": "using UnityEngine;\r\n\r\nprivate void DoDung()\r\n{\r\n\tdungProduction -= 1f;\r\n\tItemManager.Create(Dung, 1, 0uL).Drop(base.transform.position + -base.transform.forward + Vector3.up * 1.1f + Random.insideUnitSphere * 0.1f, -base.transform.forward);\r\n}\r\n",
    "OnWorldPrefabSpawn (World_Spawn_OnWorldPrefabSpawn)": "using System;\r\nusing System.Collections;\r\nusing System.Diagnostics;\r\nusing UnityEngine;\r\n\r\npublic static IEnumerator Spawn(float deltaTime, Action<string> statusFunction = null)\r\n{\r\n\tStopwatch sw = Stopwatch.StartNew();\r\n\tfor (int i = 0; i < Serialization.world.prefabs.Count; i++)\r\n\t{\r\n\t\tif (sw.Elapsed.TotalSeconds > (double)deltaTime || i == 0 || i == Serialization.world.prefabs.Count - 1)\r\n\t\t{\r\n\t\t\tStatus(statusFunction, \"Spawning World ({0}/{1})\", i + 1, Serialization.world.prefabs.Count);\r\n\t\t\tyield return CoroutineEx.waitForEndOfFrame;\r\n\t\t\tsw.Reset();\r\n\t\t\tsw.Start();\r\n\t\t}\r\n\t\tSpawn(Serialization.world.prefabs[i]);\r\n\t}\r\n}\r\n",
    "OnPlayerCommand (Chat_SayAs)": "using System;\r\nusing System.Collections.Generic;\r\nusing CompanionServer;\r\nusing Facepunch;\r\nusing Facepunch.Math;\r\nusing Network;\r\nusing UnityEngine;\r\n\r\ninternal static bool sayAs(ChatChannel targetChannel, ulong userId, string username, string message, BasePlayer player = null)\r\n{\r\n\tif (!player)\r\n\t{\r\n\t\tplayer = null;\r\n\t}\r\n\tif (!enabled)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (player != null && player.HasPlayerFlag(BasePlayer.PlayerFlags.ChatMute))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tServerUsers.UserGroup userGroup = ServerUsers.Get(userId)?.group ?? ServerUsers.UserGroup.None;\r\n\tif (userGroup == ServerUsers.UserGroup.Banned)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tstring text = message.Replace(\"\\n\", \"\").Replace(\"\\r\", \"\").Trim();\r\n\tif (text.Length > 128)\r\n\t{\r\n\t\ttext = text.Substring(0, 128);\r\n\t}\r\n\tif (text.Length <= 0)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (text.StartsWith(\"/\") || text.StartsWith(\"\\\\\"))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\ttext = text.EscapeRichText();\r\n\tif (serverlog)\r\n\t{\r\n\t\tServerConsole.PrintColoured(ConsoleColor.DarkYellow, string.Concat(\"[\", targetChannel, \"] \", username, \": \"), ConsoleColor.DarkGreen, text);\r\n\t\tstring text2 = player?.ToString() ?? $\"{username}[{userId}]\";\r\n\t\tswitch (targetChannel)\r\n\t\t{\r\n\t\tcase ChatChannel.Team:\r\n\t\t\tDebugEx.Log(\"[TEAM CHAT] \" + text2 + \" : \" + text);\r\n\t\t\tbreak;\r\n\t\tcase ChatChannel.Cards:\r\n\t\t\tDebugEx.Log(\"[CARDS CHAT] \" + text2 + \" : \" + text);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tDebugEx.Log(\"[CHAT] \" + text2 + \" : \" + text);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tbool flag = userGroup == ServerUsers.UserGroup.Owner || userGroup == ServerUsers.UserGroup.Moderator;\r\n\tbool num = ((player != null) ? player.IsDeveloper : DeveloperList.Contains(userId));\r\n\tstring text3 = \"#5af\";\r\n\tif (flag)\r\n\t{\r\n\t\ttext3 = \"#af5\";\r\n\t}\r\n\tif (num)\r\n\t{\r\n\t\ttext3 = \"#fa5\";\r\n\t}\r\n\tstring text4 = username.EscapeRichText();\r\n\tChatEntry ce = default(ChatEntry);\r\n\tce.Channel = targetChannel;\r\n\tce.Message = text;\r\n\tce.UserId = ((player != null) ? player.UserIDString : userId.ToString());\r\n\tce.Username = username;\r\n\tce.Color = text3;\r\n\tce.Time = Epoch.Current;\r\n\tRecord(ce);\r\n\tswitch (targetChannel)\r\n\t{\r\n\tcase ChatChannel.Cards:\r\n\t{\r\n\t\tif (player == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (!player.isMounted)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tCardTable cardTable = player.GetMountedVehicle() as CardTable;\r\n\t\tif (cardTable == null || !cardTable.GameController.PlayerIsInGame(player))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tList<Network.Connection> obj = Facepunch.Pool.GetList<Network.Connection>();\r\n\t\tcardTable.GameController.GetConnectionsInGame(obj);\r\n\t\tif (obj.Count > 0)\r\n\t\t{\r\n\t\t\tConsoleNetwork.SendClientCommand(obj, \"chat.add2\", 3, userId, text, text4, text3, 1f);\r\n\t\t}\r\n\t\tFacepunch.Pool.FreeList(ref obj);\r\n\t\treturn true;\r\n\t}\r\n\tcase ChatChannel.Global:\r\n\t\tConsoleNetwork.BroadcastToAllClients(\"chat.add2\", 0, userId, text, text4, text3, 1f);\r\n\t\treturn true;\r\n\tcase ChatChannel.Local:\r\n\t{\r\n\t\tif (!(player != null))\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tfloat num2 = localChatRange * localChatRange;\r\n\t\tforeach (BasePlayer activePlayer in BasePlayer.activePlayerList)\r\n\t\t{\r\n\t\t\tfloat sqrMagnitude = (activePlayer.transform.position - player.transform.position).sqrMagnitude;\r\n\t\t\tif (!(sqrMagnitude > num2))\r\n\t\t\t{\r\n\t\t\t\tConsoleNetwork.SendClientCommand(activePlayer.net.connection, \"chat.add2\", 4, userId, text, text4, text3, Mathf.Clamp01(sqrMagnitude / num2 + 0.2f));\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\tcase ChatChannel.Team:\r\n\t{\r\n\t\tRelationshipManager.PlayerTeam playerTeam = RelationshipManager.ServerInstance.FindPlayersTeam(userId);\r\n\t\tif (playerTeam == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tList<Network.Connection> onlineMemberConnections = playerTeam.GetOnlineMemberConnections();\r\n\t\tif (onlineMemberConnections != null)\r\n\t\t{\r\n\t\t\tConsoleNetwork.SendClientCommand(onlineMemberConnections, \"chat.add2\", 1, userId, text, text4, text3, 1f);\r\n\t\t}\r\n\t\tplayerTeam.BroadcastTeamChat(userId, text4, text, text3);\r\n\t\treturn true;\r\n\t}\r\n\t}\r\n\treturn false;\r\n}\r\n",
    "OnCarbonCommand (CarbonConsoleCommand)": "using UnityEngine;\r\n\r\npublic static string Run(Option options, string strCommand, params object[] args)\r\n{\r\n\tLastError = null;\r\n\tstring text = BuildCommand(strCommand, args);\r\n\tArg arg = new Arg(options, text);\r\n\tbool flag = arg.HasPermission();\r\n\tif (!arg.Invalid && flag)\r\n\t{\r\n\t\tArg currentArgs = CurrentArgs;\r\n\t\tCurrentArgs = arg;\r\n\t\tbool flag2 = Internal(arg);\r\n\t\tCurrentArgs = currentArgs;\r\n\t\tif (options.PrintOutput && flag2 && arg.Reply != null && arg.Reply.Length > 0)\r\n\t\t{\r\n\t\t\tDebugEx.Log(arg.Reply);\r\n\t\t}\r\n\t\treturn arg.Reply;\r\n\t}\r\n\tLastError = \"Command not found\";\r\n\tif (!flag)\r\n\t{\r\n\t\tLastError = \"Permission denied\";\r\n\t}\r\n\tif (!options.IsServer && (!options.ForwardtoServerOnMissing || !SendToServer(text)))\r\n\t{\r\n\t\tLastError = \"Command '\" + strCommand + \"' not found\";\r\n\t\tif (options.PrintOutput)\r\n\t\t{\r\n\t\t\tDebugEx.Log(LastError);\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\tif (options.IsServer && options.PrintOutput)\r\n\t{\r\n\t\tLastError = \"Command '\" + strCommand + \"' not found\";\r\n\t\tDebugEx.Log(LastError);\r\n\t}\r\n\treturn null;\r\n}\r\n",
    "OnServerCommand (ServerConsoleCommand)": "using System;\r\nusing Facepunch.Extend;\r\nusing UnityEngine;\r\n\r\nprivate static bool Internal(Arg arg)\r\n{\r\n\tif (arg.Invalid)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!arg.HasPermission())\r\n\t{\r\n\t\targ.ReplyWith(\"You cannot run this command\");\r\n\t\treturn false;\r\n\t}\r\n\ttry\r\n\t{\r\n\t\tusing (TimeWarning.New(\"ConsoleSystem: \" + arg.cmd.FullName))\r\n\t\t{\r\n\t\t\targ.cmd.Call(arg);\r\n\t\t}\r\n\t}\r\n\tcatch (Exception ex)\r\n\t{\r\n\t\targ.ReplyWith(\"Error: \" + arg.cmd.FullName + \" - \" + ex.Message + \" (\" + ex.Source + \")\");\r\n\t\tDebug.LogException(ex);\r\n\t\treturn false;\r\n\t}\r\n\tif (arg.cmd.Variable && arg.cmd.GetOveride != null && string.IsNullOrWhiteSpace(arg.Reply))\r\n\t{\r\n\t\tstring @string = arg.cmd.String;\r\n\t\tstring text = (arg.cmd.Variable ? arg.cmd.String : \"\");\r\n\t\tif (text != @string)\r\n\t\t{\r\n\t\t\targ.ReplyWith($\"{arg.cmd.FullName}: changed from {text.QuoteSafe()} to {@string.QuoteSafe()}\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\targ.ReplyWith($\"{arg.cmd.FullName}: {@string.QuoteSafe()}\");\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "IItemContainerAmountPatch (ItemContainer_GetAmount)": "public int GetAmount(int itemid, bool onlyUsableAmounts)\r\n{\r\n\tint num = 0;\r\n\tforeach (Item item in itemList)\r\n\t{\r\n\t\tif (item.info.itemid == itemid && (!onlyUsableAmounts || !item.IsBusy()))\r\n\t\t{\r\n\t\t\tnum += item.amount;\r\n\t\t}\r\n\t}\r\n\treturn num;\r\n}\r\n",
    "IOnHarmonyLoad (Harmony_Load)": "[ServerVar(Name = \"load\")]\r\npublic static void Load(Arg args)\r\n{\r\n\tHarmonyLoader.TryLoadMod(args.GetString(0));\r\n}\r\n",
    "IOnHarmonyUnload (Harmony_Unload)": "[ServerVar(Name = \"unload\")]\r\npublic static void Unload(Arg args)\r\n{\r\n\tHarmonyLoader.TryUnloadMod(args.GetString(0));\r\n}\r\n",
    "IInit (Init)": "private void StartupShared()\r\n{\r\n\tItemManager.Initialize();\r\n}\r\n",
    "IServerInfoUpdate (ServerMgr_UpdateServerInformation)": "using System.Linq;\r\nusing ConVar;\r\nusing Facepunch;\r\nusing Facepunch.Math;\r\nusing Network;\r\nusing Steamworks;\r\nusing UnityEngine;\r\n\r\nprivate void UpdateServerInformation()\r\n{\r\n\tif (!SteamServer.IsValid)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tusing (TimeWarning.New(\"UpdateServerInformation\"))\r\n\t{\r\n\t\tSteamServer.ServerName = ConVar.Server.hostname;\r\n\t\tSteamServer.MaxPlayers = ConVar.Server.maxplayers;\r\n\t\tSteamServer.Passworded = false;\r\n\t\tSteamServer.MapName = World.GetServerBrowserMapName();\r\n\t\tstring text = \"stok\";\r\n\t\tif (Restarting)\r\n\t\t{\r\n\t\t\ttext = \"strst\";\r\n\t\t}\r\n\t\tstring text2 = $\"born{Epoch.FromDateTime(SaveRestore.SaveCreatedTime)}\";\r\n\t\tstring text3 = $\"gm{GamemodeName()}\";\r\n\t\tstring text4 = (ConVar.Server.pve ? \",pve\" : string.Empty);\r\n\t\tstring text5 = ConVar.Server.tags?.Trim(',') ?? \"\";\r\n\t\tstring text6 = ((!string.IsNullOrWhiteSpace(text5)) ? (\",\" + text5) : \"\");\r\n\t\tSteamServer.GameTags = $\"mp{ConVar.Server.maxplayers},cp{BasePlayer.activePlayerList.Count},pt{Network.Net.sv.ProtocolId},qp{SingletonComponent<ServerMgr>.Instance.connectionQueue.Queued},v{2360}{text4}{text6},h{AssemblyHash},{text},{text2},{text3}\";\r\n\t\tif (ConVar.Server.description != null && ConVar.Server.description.Length > 100)\r\n\t\t{\r\n\t\t\tstring[] array = ConVar.Server.description.SplitToChunks(100).ToArray();\r\n\t\t\tfor (int i = 0; i < 16; i++)\r\n\t\t\t{\r\n\t\t\t\tif (i < array.Length)\r\n\t\t\t\t{\r\n\t\t\t\t\tSteamServer.SetKey($\"description_{i:00}\", array[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tSteamServer.SetKey($\"description_{i:00}\", string.Empty);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tSteamServer.SetKey(\"description_0\", ConVar.Server.description);\r\n\t\t\tfor (int j = 1; j < 16; j++)\r\n\t\t\t{\r\n\t\t\t\tSteamServer.SetKey($\"description_{j:00}\", string.Empty);\r\n\t\t\t}\r\n\t\t}\r\n\t\tSteamServer.SetKey(\"hash\", AssemblyHash);\r\n\t\tstring value = World.Seed.ToString();\r\n\t\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\t\tif (activeGameMode != null && !activeGameMode.ingameMap)\r\n\t\t{\r\n\t\t\tvalue = \"0\";\r\n\t\t}\r\n\t\tSteamServer.SetKey(\"world.seed\", value);\r\n\t\tSteamServer.SetKey(\"world.size\", World.Size.ToString());\r\n\t\tSteamServer.SetKey(\"pve\", ConVar.Server.pve.ToString());\r\n\t\tSteamServer.SetKey(\"headerimage\", ConVar.Server.headerimage);\r\n\t\tSteamServer.SetKey(\"logoimage\", ConVar.Server.logoimage);\r\n\t\tSteamServer.SetKey(\"url\", ConVar.Server.url);\r\n\t\tSteamServer.SetKey(\"gmn\", GamemodeName());\r\n\t\tSteamServer.SetKey(\"gmt\", GamemodeTitle());\r\n\t\tSteamServer.SetKey(\"uptime\", ((int)UnityEngine.Time.realtimeSinceStartup).ToString());\r\n\t\tSteamServer.SetKey(\"gc_mb\", Performance.report.memoryAllocations.ToString());\r\n\t\tSteamServer.SetKey(\"gc_cl\", Performance.report.memoryCollections.ToString());\r\n\t\tSteamServer.SetKey(\"fps\", Performance.report.frameRate.ToString());\r\n\t\tSteamServer.SetKey(\"fps_avg\", Performance.report.frameRateAverage.ToString(\"0.00\"));\r\n\t\tSteamServer.SetKey(\"ent_cnt\", BaseNetworkable.serverEntities.Count.ToString());\r\n\t\tSteamServer.SetKey(\"build\", BuildInfo.Current.Scm.ChangeId);\r\n\t}\r\n}\r\n",
    "OnPlayerConnected (OnPlayerConnected)": "using ConVar;\r\nusing Network;\r\nusing UnityEngine;\r\n\r\npublic void PlayerInit(Connection c)\r\n{\r\n\tusing (TimeWarning.New(\"PlayerInit\", 10))\r\n\t{\r\n\t\tCancelInvoke(base.KillMessage);\r\n\t\tSetPlayerFlag(PlayerFlags.Connected, b: true);\r\n\t\tactivePlayerList.Add(this);\r\n\t\tbots.Remove(this);\r\n\t\tuserID = c.userid;\r\n\t\tUserIDString = userID.ToString();\r\n\t\tdisplayName = c.username;\r\n\t\tc.player = this;\r\n\t\tcurrentTeam = RelationshipManager.ServerInstance.FindPlayersTeam(userID)?.teamID ?? 0;\r\n\t\tSingletonComponent<ServerMgr>.Instance.persistance.SetPlayerName(userID, displayName);\r\n\t\ttickInterpolator.Reset(base.transform.position);\r\n\t\ttickHistory.Reset(base.transform.position);\r\n\t\teyeHistory.Clear();\r\n\t\tlastTickTime = 0f;\r\n\t\tlastInputTime = 0f;\r\n\t\tSetPlayerFlag(PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\tstats.Init();\r\n\t\tInvokeRandomized(StatSave, Random.Range(5f, 10f), 30f, Random.Range(0f, 6f));\r\n\t\tpreviousLifeStory = SingletonComponent<ServerMgr>.Instance.persistance.GetLastLifeStory(userID);\r\n\t\tSetPlayerFlag(PlayerFlags.IsAdmin, c.authLevel != 0);\r\n\t\tSetPlayerFlag(PlayerFlags.IsDeveloper, DeveloperList.IsDeveloper(this));\r\n\t\tif (IsDead() && net.SwitchGroup(BaseNetworkable.LimboNetworkGroup))\r\n\t\t{\r\n\t\t\tSendNetworkGroupChange();\r\n\t\t}\r\n\t\tnet.OnConnected(c);\r\n\t\tnet.StartSubscriber();\r\n\t\tSendAsSnapshot(net.connection);\r\n\t\tClientRPCPlayer(null, this, \"StartLoading\");\r\n\t\tif ((bool)BaseGameMode.GetActiveGameMode(serverside: true))\r\n\t\t{\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnPlayerConnected(this);\r\n\t\t}\r\n\t\tif (net != null)\r\n\t\t{\r\n\t\t\tEACServer.OnStartLoading(net.connection);\r\n\t\t}\r\n\t\tif (IsAdmin)\r\n\t\t{\r\n\t\t\tif (ConVar.AntiHack.noclip_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.noclip_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.speedhack_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.speedhack_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.flyhack_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.flyhack_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.projectile_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.projectile_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.melee_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.melee_protection is disabled!\");\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.eye_protection <= 0)\r\n\t\t\t{\r\n\t\t\t\tChatMessage(\"antihack.eye_protection is disabled!\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnPlayerDisconnected (OnPlayerDisconnected)": "using Network;\r\n\r\npublic void OnDisconnected(string strReason, Connection connection)\r\n{\r\n\tconnectionQueue.RemoveConnection(connection);\r\n\tConnectionAuth.OnDisconnect(connection);\r\n\tPlatformService.Instance.EndPlayerSession(connection.userid);\r\n\tEACServer.OnLeaveGame(connection);\r\n\tBasePlayer basePlayer = connection.player as BasePlayer;\r\n\tif ((bool)basePlayer)\r\n\t{\r\n\t\tbasePlayer.OnDisconnected();\r\n\t}\r\n}\r\n",
    "OnServerInitialized (OnServerInitialized)": "using System;\r\nusing ConVar;\r\nusing Facepunch;\r\nusing Network;\r\nusing UnityEngine;\r\n\r\npublic void OpenConnection()\r\n{\r\n\tuseQueryPort = ConVar.Server.queryport > 0 && ConVar.Server.queryport != ConVar.Server.port;\r\n\tif (!useQueryPort && !Network.Net.sv.AllowPassthroughMessages)\r\n\t{\r\n\t\tConVar.Server.queryport = Math.Max(ConVar.Server.port, RCon.Port) + 1;\r\n\t\tuseQueryPort = true;\r\n\t}\r\n\tNetwork.Net.sv.ip = ConVar.Server.ip;\r\n\tNetwork.Net.sv.port = ConVar.Server.port;\r\n\tStartSteamServer();\r\n\tif (!Network.Net.sv.Start())\r\n\t{\r\n\t\tDebug.LogWarning(\"Couldn't Start Server.\");\r\n\t\tCloseConnection();\r\n\t\treturn;\r\n\t}\r\n\tNetwork.Net.sv.callbackHandler = this;\r\n\tNetwork.Net.sv.cryptography = new NetworkCryptographyServer();\r\n\tEACServer.DoStartup();\r\n\tInvokeRepeating(\"DoTick\", 1f, 1f / (float)ConVar.Server.tickrate);\r\n\tInvokeRepeating(\"DoHeartbeat\", 1f, 1f);\r\n\trunFrameUpdate = true;\r\n\tConsoleSystem.OnReplicatedVarChanged += OnReplicatedVarChanged;\r\n}\r\n",
    "OnServerSave (OnServerSave)": "using System.Collections;\r\nusing ConVar;\r\nusing UnityEngine;\r\n\r\nprivate IEnumerator DoAutomatedSave(bool AndWait = false)\r\n{\r\n\tIsSaving = true;\r\n\tstring folder = Server.rootFolder;\r\n\tif (!AndWait)\r\n\t{\r\n\t\tyield return CoroutineEx.waitForEndOfFrame;\r\n\t}\r\n\tif (AndWait)\r\n\t{\r\n\t\tIEnumerator enumerator = Save(folder + \"/\" + World.SaveFileName, AndWait);\r\n\t\twhile (enumerator.MoveNext())\r\n\t\t{\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tyield return StartCoroutine(Save(folder + \"/\" + World.SaveFileName, AndWait));\r\n\t}\r\n\tif (!AndWait)\r\n\t{\r\n\t\tyield return CoroutineEx.waitForEndOfFrame;\r\n\t}\r\n\tDebug.Log(\"Saving complete\");\r\n\tIsSaving = false;\r\n}\r\n",
    "OnServerShutdown (OnServerShutdown)": "using System.Linq;\r\n\r\ninternal void Shutdown()\r\n{\r\n\tBasePlayer[] array = BasePlayer.activePlayerList.ToArray();\r\n\tfor (int i = 0; i < array.Length; i++)\r\n\t{\r\n\t\tarray[i].Kick(\"Server Shutting Down\");\r\n\t}\r\n\tConsoleSystem.Run(ConsoleSystem.Option.Server, \"server.save\");\r\n\tConsoleSystem.Run(ConsoleSystem.Option.Server, \"server.writecfg\");\r\n}\r\n",
    "OnRconCommand (RconCommand)": "using UnityEngine;\r\n\r\nprivate static void OnCommand(Command cmd)\r\n{\r\n\ttry\r\n\t{\r\n\t\tresponseIdentifier = cmd.Identifier;\r\n\t\tresponseConnection = cmd.ConnectionId;\r\n\t\tisInput = true;\r\n\t\tif (Print)\r\n\t\t{\r\n\t\t\tDebug.Log(string.Concat(\"[rcon] \", cmd.Ip, \": \", cmd.Message));\r\n\t\t}\r\n\t\tisInput = false;\r\n\t\tstring text = ConsoleSystem.Run(ConsoleSystem.Option.Server.Quiet(), cmd.Message);\r\n\t\tif (text != null)\r\n\t\t{\r\n\t\t\tOnMessage(text, string.Empty, UnityEngine.LogType.Log);\r\n\t\t}\r\n\t}\r\n\tfinally\r\n\t{\r\n\t\tresponseIdentifier = 0;\r\n\t\tresponseConnection = -1;\r\n\t}\r\n}\r\n",
    "IServerConsoleLog (ServerConsoleLog)": "using System;\r\nusing UnityEngine;\r\n\r\nprivate void HandleLog(string message, string stackTrace, LogType type)\r\n{\r\n\tif (message.StartsWith(\"[CHAT]\") || message.StartsWith(\"[TEAM CHAT]\") || message.StartsWith(\"[CARDS CHAT]\"))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tswitch (type)\r\n\t{\r\n\tcase LogType.Warning:\r\n\t\tif (message.StartsWith(\"HDR RenderTexture format is not\") || message.StartsWith(\"The image effect\") || message.StartsWith(\"Image Effects are not supported on this platform\") || message.StartsWith(\"[AmplifyColor]\") || message.StartsWith(\"Skipping profile frame.\") || message.StartsWith(\"Kinematic body only supports Speculative Continuous collision detection\"))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tConsole.ForegroundColor = ConsoleColor.Yellow;\r\n\t\tbreak;\r\n\tcase LogType.Error:\r\n\t\tConsole.ForegroundColor = ConsoleColor.Red;\r\n\t\tbreak;\r\n\tcase LogType.Exception:\r\n\t\tConsole.ForegroundColor = ConsoleColor.Red;\r\n\t\tbreak;\r\n\tcase LogType.Assert:\r\n\t\tConsole.ForegroundColor = ConsoleColor.Red;\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tConsole.ForegroundColor = ConsoleColor.Gray;\r\n\t\tbreak;\r\n\t}\r\n\tinput.ClearLine(input.statusText.Length);\r\n\tConsole.WriteLine(message);\r\n\tinput.RedrawInputLine();\r\n}\r\n",
    "IDebugLogWarning (Debug_LogWarning)": "public static void LogWarning(object message)\r\n{\r\n\tunityLogger.Log(LogType.Warning, message);\r\n}\r\n",
    "IItemContainerTakePatch (ItemContainer_Take)": "using System.Collections.Generic;\r\nusing Facepunch;\r\n\r\npublic int Take(List<Item> collect, int itemid, int iAmount)\r\n{\r\n\tint num = 0;\r\n\tif (iAmount == 0)\r\n\t{\r\n\t\treturn num;\r\n\t}\r\n\tList<Item> obj = Pool.GetList<Item>();\r\n\tforeach (Item item2 in itemList)\r\n\t{\r\n\t\tif (item2.info.itemid != itemid)\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tint num2 = iAmount - num;\r\n\t\tif (num2 > 0)\r\n\t\t{\r\n\t\t\tif (item2.amount > num2)\r\n\t\t\t{\r\n\t\t\t\titem2.MarkDirty();\r\n\t\t\t\titem2.amount -= num2;\r\n\t\t\t\tnum += num2;\r\n\t\t\t\tItem item = ItemManager.CreateByItemID(itemid, 1, 0uL);\r\n\t\t\t\titem.amount = num2;\r\n\t\t\t\titem.CollectedForCrafting(playerOwner);\r\n\t\t\t\tcollect?.Add(item);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (item2.amount <= num2)\r\n\t\t\t{\r\n\t\t\t\tnum += item2.amount;\r\n\t\t\t\tobj.Add(item2);\r\n\t\t\t\tcollect?.Add(item2);\r\n\t\t\t}\r\n\t\t\tif (num == iAmount)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tforeach (Item item3 in obj)\r\n\t{\r\n\t\titem3.RemoveFromContainer();\r\n\t}\r\n\tPool.FreeList(ref obj);\r\n\treturn num;\r\n}\r\n",
    "CanElevatorLiftMove (ElevatorLift_CanMove)": "public bool CanMove()\r\n{\r\n\treturn !VehicleTrigger.HasContents;\r\n}\r\n",
    "OnElevatorButtonPress (ElevatorLift_Server_RaiseLowerFloor)": "using UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void Server_RaiseLowerFloor(RPCMessage msg)\r\n{\r\n\tif (CanMove())\r\n\t{\r\n\t\tElevator.Direction direction = (Elevator.Direction)msg.read.Int32();\r\n\t\tbool goTopBottom = msg.read.Bit();\r\n\t\tSetFlag((direction == Elevator.Direction.Up) ? Flags.Reserved1 : Flags.Reserved2, b: true);\r\n\t\towner.Server_RaiseLowerElevator(direction, goTopBottom);\r\n\t\tInvoke(ClearDirection, 0.7f);\r\n\t\tif (liftButtonPressedEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(liftButtonPressedEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnElevatorMove (Elevator_RequestMoveLiftTo)": "using UnityEngine;\r\n\r\nprotected bool RequestMoveLiftTo(int targetFloor, out float timeToTravel)\r\n{\r\n\ttimeToTravel = 0f;\r\n\tif (IsBusy())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!IsStatic && ioEntity != null && !ioEntity.IsPowered())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!IsValidFloor(targetFloor))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!liftEntity.CanMove())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (LiftPositionToFloor() == targetFloor)\r\n\t{\r\n\t\tOnLiftCalledWhenAtTargetFloor();\r\n\t\treturn false;\r\n\t}\r\n\tVector3 worldSpaceFloorPosition = GetWorldSpaceFloorPosition(targetFloor);\r\n\tif (!GamePhysics.LineOfSight(liftEntity.transform.position, worldSpaceFloorPosition, 2097152))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tOnMoveBegin();\r\n\tVector3 vector = base.transform.InverseTransformPoint(worldSpaceFloorPosition);\r\n\ttimeToTravel = TimeToTravelDistance(Mathf.Abs(liftEntity.transform.localPosition.y - vector.y));\r\n\tLeanTween.moveLocalY(liftEntity.gameObject, vector.y, timeToTravel);\r\n\tSetFlag(Flags.Busy, b: true);\r\n\tif (targetFloor < Floor)\r\n\t{\r\n\t\tliftEntity.ToggleHurtTrigger(state: true);\r\n\t}\r\n\tInvoke(ClearBusy, timeToTravel);\r\n\tif (ioEntity != null)\r\n\t{\r\n\t\tioEntity.SetFlag(Flags.Busy, b: true);\r\n\t\tioEntity.SendChangedToRoot(forceUpdate: true);\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "OnLiftUse (Lift_RPC_UseLift)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\nprivate void RPC_UseLift(RPCMessage rpc)\r\n{\r\n\tif (rpc.player.CanInteract())\r\n\t{\r\n\t\tMoveUp();\r\n\t}\r\n}\r\n",
    "OnLiftUse (ProceduralLift_RPC_UseLift)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\nprivate void RPC_UseLift(RPCMessage rpc)\r\n{\r\n\tif (rpc.player.CanInteract() && !IsBusy())\r\n\t{\r\n\t\tMoveToFloor((floorIndex + 1) % stops.Length);\r\n\t}\r\n}\r\n",
    "CanBradleyApcTarget (BradleyAPC_VisibilityTest)": "using UnityEngine;\r\n\r\npublic bool VisibilityTest(BaseEntity ent)\r\n{\r\n\tif (ent == null)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!(Vector3.Distance(ent.transform.position, base.transform.position) < viewDistance))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tbool flag = false;\r\n\tif (ent is BasePlayer)\r\n\t{\r\n\t\tBasePlayer basePlayer = ent as BasePlayer;\r\n\t\tVector3 position = mainTurret.transform.position;\r\n\t\tflag = IsVisible(basePlayer.eyes.position, position) || IsVisible(basePlayer.transform.position + Vector3.up * 0.1f, position);\r\n\t\tif (!flag && basePlayer.isMounted && basePlayer.GetMounted().VehicleParent() != null && basePlayer.GetMounted().VehicleParent().AlwaysAllowBradleyTargeting)\r\n\t\t{\r\n\t\t\tflag = IsVisible(basePlayer.GetMounted().VehicleParent().bounds.center, position);\r\n\t\t}\r\n\t\tif (flag)\r\n\t\t{\r\n\t\t\tflag = !Physics.SphereCast(new Ray(position, Vector3Ex.Direction(basePlayer.eyes.position, position)), 0.05f, Vector3.Distance(basePlayer.eyes.position, position), 10551297);\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tDebug.LogWarning(\"Standard vis test!\");\r\n\t\tflag = IsVisible(ent.CenterPoint());\r\n\t}\r\n\treturn flag;\r\n}\r\n",
    "OnEntityDismounted (BaseMountable_DismountPlayer_OnEntityDismount)": "using Rust;\r\nusing UnityEngine;\r\n\r\npublic void DismountPlayer(BasePlayer player, bool lite = false)\r\n{\r\n\tif (_mounted == null || _mounted != player)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBaseVehicle baseVehicle = VehicleParent();\r\n\tVector3 res;\r\n\tif (lite)\r\n\t{\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t}\r\n\t\t_mounted.DismountObject();\r\n\t\t_mounted = null;\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t}\r\n\t}\r\n\telse if (!GetDismountPosition(player, out res) || Distance(res) > 10f)\r\n\t{\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t}\r\n\t\tres = player.transform.position;\r\n\t\t_mounted.DismountObject();\r\n\t\t_mounted.MovePosition(res);\r\n\t\t_mounted.ClientRPCPlayer(null, _mounted, \"ForcePositionTo\", res);\r\n\t\tBasePlayer mounted = _mounted;\r\n\t\t_mounted = null;\r\n\t\tDebug.LogWarning(\"Killing player due to invalid dismount point :\" + player.displayName + \" / \" + player.userID + \" on obj : \" + base.gameObject.name);\r\n\t\tmounted.Hurt(1000f, DamageType.Suicide, mounted, useProtection: false);\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t}\r\n\t\t_mounted.DismountObject();\r\n\t\t_mounted.transform.rotation = Quaternion.LookRotation(Vector3.forward, Vector3.up);\r\n\t\t_mounted.MovePosition(res);\r\n\t\t_mounted.SendNetworkUpdateImmediate();\r\n\t\t_mounted.SendModelState(force: true);\r\n\t\t_mounted = null;\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t}\r\n\t\tplayer.ForceUpdateTriggers();\r\n\t\tif ((bool)player.GetParentEntity())\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = player.GetParentEntity();\r\n\t\t\tplayer.ClientRPCPlayer(null, player, \"ForcePositionToParentOffset\", baseEntity.transform.InverseTransformPoint(res), baseEntity.net.ID);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tplayer.ClientRPCPlayer(null, player, \"ForcePositionTo\", res);\r\n\t\t}\r\n\t\tOnPlayerDismounted(player);\r\n\t}\r\n}\r\n",
    "CanDismountEntity (BaseMountable_DismountPlayer_CanDismountEntity)": "using Rust;\r\nusing UnityEngine;\r\n\r\npublic void DismountPlayer(BasePlayer player, bool lite = false)\r\n{\r\n\tif (_mounted == null || _mounted != player)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBaseVehicle baseVehicle = VehicleParent();\r\n\tVector3 res;\r\n\tif (lite)\r\n\t{\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t}\r\n\t\t_mounted.DismountObject();\r\n\t\t_mounted = null;\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t}\r\n\t}\r\n\telse if (!GetDismountPosition(player, out res) || Distance(res) > 10f)\r\n\t{\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t}\r\n\t\tres = player.transform.position;\r\n\t\t_mounted.DismountObject();\r\n\t\t_mounted.MovePosition(res);\r\n\t\t_mounted.ClientRPCPlayer(null, _mounted, \"ForcePositionTo\", res);\r\n\t\tBasePlayer mounted = _mounted;\r\n\t\t_mounted = null;\r\n\t\tDebug.LogWarning(\"Killing player due to invalid dismount point :\" + player.displayName + \" / \" + player.userID + \" on obj : \" + base.gameObject.name);\r\n\t\tmounted.Hurt(1000f, DamageType.Suicide, mounted, useProtection: false);\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PrePlayerDismount(player, this);\r\n\t\t}\r\n\t\t_mounted.DismountObject();\r\n\t\t_mounted.transform.rotation = Quaternion.LookRotation(Vector3.forward, Vector3.up);\r\n\t\t_mounted.MovePosition(res);\r\n\t\t_mounted.SendNetworkUpdateImmediate();\r\n\t\t_mounted.SendModelState(force: true);\r\n\t\t_mounted = null;\r\n\t\tSetFlag(Flags.Busy, b: false);\r\n\t\tif (baseVehicle != null)\r\n\t\t{\r\n\t\t\tbaseVehicle.PlayerDismounted(player, this);\r\n\t\t}\r\n\t\tplayer.ForceUpdateTriggers();\r\n\t\tif ((bool)player.GetParentEntity())\r\n\t\t{\r\n\t\t\tBaseEntity baseEntity = player.GetParentEntity();\r\n\t\t\tplayer.ClientRPCPlayer(null, player, \"ForcePositionToParentOffset\", baseEntity.transform.InverseTransformPoint(res), baseEntity.net.ID);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tplayer.ClientRPCPlayer(null, player, \"ForcePositionTo\", res);\r\n\t\t}\r\n\t\tOnPlayerDismounted(player);\r\n\t}\r\n}\r\n",
    "OnEntityMounted (BaseMountable_MountPlayer_OnEntityMounted)": "using UnityEngine;\r\n\r\npublic void MountPlayer(BasePlayer player)\r\n{\r\n\tif (!(_mounted != null) && !(mountAnchor == null))\r\n\t{\r\n\t\tplayer.EnsureDismounted();\r\n\t\t_mounted = player;\r\n\t\tTransform transform = mountAnchor.transform;\r\n\t\tplayer.MountObject(this);\r\n\t\tplayer.MovePosition(transform.position);\r\n\t\tplayer.transform.rotation = transform.rotation;\r\n\t\tplayer.ServerRotation = transform.rotation;\r\n\t\tplayer.OverrideViewAngles(transform.rotation.eulerAngles);\r\n\t\t_mounted.eyes.NetworkUpdate(transform.rotation);\r\n\t\tplayer.ClientRPCPlayer(null, player, \"ForcePositionTo\", player.transform.position);\r\n\t\tSetFlag(Flags.Busy, b: true);\r\n\t\tOnPlayerMounted();\r\n\t}\r\n}\r\n",
    "CanMountEntity (BaseMountable_MountPlayer_CanMountEntity)": "using UnityEngine;\r\n\r\npublic void MountPlayer(BasePlayer player)\r\n{\r\n\tif (!(_mounted != null) && !(mountAnchor == null))\r\n\t{\r\n\t\tplayer.EnsureDismounted();\r\n\t\t_mounted = player;\r\n\t\tTransform transform = mountAnchor.transform;\r\n\t\tplayer.MountObject(this);\r\n\t\tplayer.MovePosition(transform.position);\r\n\t\tplayer.transform.rotation = transform.rotation;\r\n\t\tplayer.ServerRotation = transform.rotation;\r\n\t\tplayer.OverrideViewAngles(transform.rotation.eulerAngles);\r\n\t\t_mounted.eyes.NetworkUpdate(transform.rotation);\r\n\t\tplayer.ClientRPCPlayer(null, player, \"ForcePositionTo\", player.transform.position);\r\n\t\tSetFlag(Flags.Busy, b: true);\r\n\t\tOnPlayerMounted();\r\n\t}\r\n}\r\n",
    "CanNetworkTo (BaseNetworkable_ShouldNetworkTo)": "public virtual bool ShouldNetworkTo(BasePlayer player)\r\n{\r\n\tif (net.group == null)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\treturn player.net.subscriber.IsSubscribed(net.group);\r\n}\r\n",
    "CanNetworkTo (BasePlayer_ShouldNetworkTo)": "public override bool ShouldNetworkTo(BasePlayer player)\r\n{\r\n\tif (IsSpectating() && player != this && !player.net.connection.info.GetBool(\"global.specnet\"))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\treturn base.ShouldNetworkTo(player);\r\n}\r\n",
    "CanNetworkTo (BaseEntity_ShouldNetworkTo)": "public override bool ShouldNetworkTo(BasePlayer player)\r\n{\r\n\tif (player == this)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tBaseEntity baseEntity = GetParentEntity();\r\n\tif (base.limitNetworking)\r\n\t{\r\n\t\tif (baseEntity == null)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (baseEntity != player)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tif (baseEntity != null)\r\n\t{\r\n\t\treturn baseEntity.ShouldNetworkTo(player);\r\n\t}\r\n\treturn base.ShouldNetworkTo(player);\r\n}\r\n",
    "CanWaterBallSplash (WaterBall_DoSplash)": "using System.Collections.Generic;\r\nusing Facepunch;\r\nusing UnityEngine;\r\n\r\npublic static bool DoSplash(Vector3 position, float radius, ItemDefinition liquidDef, int amount)\r\n{\r\n\tList<BaseEntity> obj = Pool.GetList<BaseEntity>();\r\n\tVis.Entities(position, radius, obj, 1219701523);\r\n\tint num = 0;\r\n\tint num2 = amount;\r\n\twhile (amount > 0 && num < 3)\r\n\t{\r\n\t\tList<ISplashable> obj2 = Pool.GetList<ISplashable>();\r\n\t\tforeach (BaseEntity item in obj)\r\n\t\t{\r\n\t\t\tif (!item.isClient && item is ISplashable splashable && !obj2.Contains(splashable) && splashable.WantsSplash(liquidDef, amount))\r\n\t\t\t{\r\n\t\t\t\tobj2.Add(splashable);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (obj2.Count == 0)\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tint b = Mathf.CeilToInt(amount / obj2.Count);\r\n\t\tforeach (ISplashable item2 in obj2)\r\n\t\t{\r\n\t\t\tint num3 = item2.DoSplash(liquidDef, Mathf.Min(amount, b));\r\n\t\t\tamount -= num3;\r\n\t\t\tif (amount <= 0)\r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tPool.FreeList(ref obj2);\r\n\t\tnum++;\r\n\t}\r\n\tPool.FreeList(ref obj);\r\n\treturn amount < num2;\r\n}\r\n",
    "OnBuildingPrivilege (BaseEntity_GetBuildingPrivilege)": "public virtual BuildingPrivlidge GetBuildingPrivilege()\r\n{\r\n\treturn GetBuildingPrivilege(WorldSpaceBounds());\r\n}\r\n",
    "OnEntityBuilt (Planner_DoBuild_OnEntityBuilt)": "using ConVar;\r\nusing ProtoBuf;\r\nusing UnityEngine;\r\n\r\npublic void DoBuild(CreateBuilding msg)\r\n{\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (!ownerPlayer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (ConVar.AntiHack.objectplacement && ownerPlayer.TriggeredAntiHack())\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"AntiHack!\");\r\n\t\treturn;\r\n\t}\r\n\tConstruction construction = PrefabAttribute.server.Find<Construction>(msg.blockID);\r\n\tif (construction == null)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Couldn't find Construction \" + msg.blockID);\r\n\t\treturn;\r\n\t}\r\n\tif (!CanAffordToPlace(construction))\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Can't afford to place!\");\r\n\t\treturn;\r\n\t}\r\n\tif (!ownerPlayer.CanBuild() && !construction.canBypassBuildingPermission)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Building is blocked!\");\r\n\t\treturn;\r\n\t}\r\n\tDeployable deployable = GetDeployable();\r\n\tif (construction.deployable != deployable)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Deployable mismatch!\");\r\n\t\tAntiHack.NoteAdminHack(ownerPlayer);\r\n\t\treturn;\r\n\t}\r\n\tBaseGameMode.CanBuildResult? canBuildResult = BaseGameMode.GetActiveGameMode(serverside: true)?.CanBuildEntity(ownerPlayer, construction);\r\n\tif (canBuildResult.HasValue)\r\n\t{\r\n\t\tif (canBuildResult.Value.Phrase != null)\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast((!canBuildResult.Value.Result) ? GameTip.Styles.Red_Normal : GameTip.Styles.Blue_Long, canBuildResult.Value.Phrase, canBuildResult.Value.Arguments);\r\n\t\t}\r\n\t\tif (!canBuildResult.Value.Result)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tConstruction.Target target = default(Construction.Target);\r\n\tif (msg.entity != 0)\r\n\t{\r\n\t\ttarget.entity = BaseNetworkable.serverEntities.Find(msg.entity) as BaseEntity;\r\n\t\tif (target.entity == null)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Couldn't find entity \" + msg.entity);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tmsg.position = target.entity.transform.TransformPoint(msg.position);\r\n\t\tmsg.normal = target.entity.transform.TransformDirection(msg.normal);\r\n\t\tmsg.rotation = target.entity.transform.rotation * msg.rotation;\r\n\t\tif (msg.socket != 0)\r\n\t\t{\r\n\t\t\tstring text = StringPool.Get(msg.socket);\r\n\t\t\tif (text != \"\")\r\n\t\t\t{\r\n\t\t\t\ttarget.socket = FindSocket(text, target.entity.prefabID);\r\n\t\t\t}\r\n\t\t\tif (target.socket == null)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ChatMessage(\"Couldn't find socket \" + msg.socket);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (target.entity is Door)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Can't deploy on door\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\ttarget.ray = msg.ray;\r\n\ttarget.onTerrain = msg.onterrain;\r\n\ttarget.position = msg.position;\r\n\ttarget.normal = msg.normal;\r\n\ttarget.rotation = msg.rotation;\r\n\ttarget.player = ownerPlayer;\r\n\ttarget.valid = true;\r\n\tif (target.entity != null && deployable != null && deployable.setSocketParent)\r\n\t{\r\n\t\tVector3 position = ((target.socket != null) ? target.GetWorldPosition() : target.position);\r\n\t\tfloat num = target.entity.Distance(position);\r\n\t\tif (num > 1f)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Parent too far away: \" + num);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tDoBuild(target, construction);\r\n}\r\n",
    "OnEntityDeath (BaseCombatEntity_Die)": "using ConVar;\r\nusing UnityEngine;\r\n\r\npublic virtual void Die(HitInfo info = null)\r\n{\r\n\tif (IsDead())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (Global.developer > 1)\r\n\t{\r\n\t\tDebug.Log(\"[Combat]\".PadRight(10) + base.gameObject.name + \" died\");\r\n\t}\r\n\thealth = 0f;\r\n\tlifestate = LifeState.Dead;\r\n\tif (info != null && (bool)info.InitiatorPlayer)\r\n\t{\r\n\t\tBasePlayer initiatorPlayer = info.InitiatorPlayer;\r\n\t\tif (initiatorPlayer != null && initiatorPlayer.GetActiveMission() != -1 && !initiatorPlayer.IsNpc)\r\n\t\t{\r\n\t\t\tinitiatorPlayer.ProcessMissionEvent(BaseMission.MissionEventType.KILL_ENTITY, prefabID.ToString(), 1f);\r\n\t\t}\r\n\t}\r\n\tusing (TimeWarning.New(\"OnKilled\"))\r\n\t{\r\n\t\tOnKilled(info);\r\n\t}\r\n}\r\n",
    "OnEntityDeath (ResourceEntity_OnKilled)": "public virtual void OnKilled(HitInfo info)\r\n{\r\n\tisKilled = true;\r\n\tKill();\r\n}\r\n",
    "OnEntityDistanceCheck (BaseEntity_MaxDistance_Test)": "public static bool Test(string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)\r\n{\r\n\treturn Test(0u, debugName, ent, player, maximumDistance);\r\n}\r\n",
    "OnEntityGroundMissing (DestroyOnGroundMissing_OnGroundMissing)": "using UnityEngine;\r\n\r\nprivate void OnGroundMissing()\r\n{\r\n\tBaseEntity baseEntity = base.gameObject.ToBaseEntity();\r\n\tif (baseEntity != null)\r\n\t{\r\n\t\tBaseCombatEntity baseCombatEntity = baseEntity as BaseCombatEntity;\r\n\t\tif (baseCombatEntity != null)\r\n\t\t{\r\n\t\t\tbaseCombatEntity.Die();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbaseEntity.Kill(BaseNetworkable.DestroyMode.Gib);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnEntityKill (BaseNetworkable_Kill)": "using UnityEngine;\r\n\r\npublic void Kill(DestroyMode mode = DestroyMode.None)\r\n{\r\n\tif (IsDestroyed)\r\n\t{\r\n\t\tDebug.LogWarning(\"Calling kill - but already IsDestroyed!? \" + this);\r\n\t\treturn;\r\n\t}\r\n\tbase.gameObject.BroadcastOnParentDestroying();\r\n\tDoEntityDestroy();\r\n\tTerminateOnClient(mode);\r\n\tTerminateOnServer();\r\n\tEntityDestroy();\r\n}\r\n",
    "OnEntitySpawned (BaseNetworkable_Spawn_OnEntitySpawned)": "using Network;\r\nusing Rust;\r\nusing UnityEngine;\r\n\r\npublic virtual void Spawn()\r\n{\r\n\tSpawnShared();\r\n\tif (net == null)\r\n\t{\r\n\t\tnet = Net.sv.CreateNetworkable();\r\n\t}\r\n\tcreationFrame = Time.frameCount;\r\n\tPreInitShared();\r\n\tInitShared();\r\n\tServerInit();\r\n\tPostInitShared();\r\n\tUpdateNetworkGroup();\r\n\tisSpawned = true;\r\n\tSendNetworkUpdateImmediate(justCreated: true);\r\n\tif (Rust.Application.isLoading && !Rust.Application.isLoadingSave)\r\n\t{\r\n\t\tbase.gameObject.SendOnSendNetworkUpdate(this as BaseEntity);\r\n\t}\r\n}\r\n",
    "OnEntityTakeDamage (ResourceEntity_OnAttacked)": "public override void OnAttacked(HitInfo info)\r\n{\r\n\tif (!base.isServer || isKilled)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (resourceDispenser != null)\r\n\t{\r\n\t\tresourceDispenser.OnAttacked(info);\r\n\t}\r\n\tif (!info.DidGather)\r\n\t{\r\n\t\tif ((bool)baseProtection)\r\n\t\t{\r\n\t\t\tbaseProtection.Scale(info.damageTypes);\r\n\t\t}\r\n\t\tfloat num = info.damageTypes.Total();\r\n\t\thealth -= num;\r\n\t\tif (health <= 0f)\r\n\t\t{\r\n\t\t\tOnKilled(info);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tOnHealthChanged();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnEntityVisibilityCheck (BaseEntity_IsVisible_Test)": "public static bool Test(string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)\r\n{\r\n\treturn Test(0u, debugName, ent, player, maximumDistance);\r\n}\r\n",
    "OnExcavatorGather (ExcavatorArm_ProduceResources)": "using UnityEngine;\r\n\r\npublic void ProduceResources()\r\n{\r\n\tfloat num = resourceProductionTickRate / timeForFullResources;\r\n\tfloat num2 = resourcesToMine[resourceMiningIndex].amount * num;\r\n\tpendingResources[resourceMiningIndex].amount += num2;\r\n\tItemAmount[] array = pendingResources;\r\n\tforeach (ItemAmount itemAmount in array)\r\n\t{\r\n\t\tif (!(itemAmount.amount >= (float)outputPiles.Count))\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tint num3 = Mathf.FloorToInt(itemAmount.amount / (float)outputPiles.Count);\r\n\t\titemAmount.amount -= num3 * 2;\r\n\t\tforeach (ExcavatorOutputPile outputPile in outputPiles)\r\n\t\t{\r\n\t\t\tItem item = ItemManager.Create(resourcesToMine[resourceMiningIndex].itemDef, num3, 0uL);\r\n\t\t\tif (!item.MoveToContainer(outputPile.inventory))\r\n\t\t\t{\r\n\t\t\t\titem.Drop(outputPile.GetDropPosition(), outputPile.GetDropVelocity());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnExcavatorResourceSet (ExcavatorArm_RPC_SetResourceTarget)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\npublic void RPC_SetResourceTarget(RPCMessage msg)\r\n{\r\n\tswitch (msg.read.String())\r\n\t{\r\n\tcase \"HQM\":\r\n\t\tresourceMiningIndex = 0;\r\n\t\tbreak;\r\n\tcase \"Sulfur\":\r\n\t\tresourceMiningIndex = 1;\r\n\t\tbreak;\r\n\tcase \"Stone\":\r\n\t\tresourceMiningIndex = 2;\r\n\t\tbreak;\r\n\tcase \"Metal\":\r\n\t\tresourceMiningIndex = 3;\r\n\t\tbreak;\r\n\t}\r\n\tif (!IsOn())\r\n\t{\r\n\t\tBeginMining();\r\n\t}\r\n}\r\n",
    "OnExcavatorSuppliesRequest (ExcavatorSignalComputer_RequestSupplies)": "using UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\n[RPC_Server.CallsPerSecond(5uL)]\r\npublic void RequestSupplies(RPCMessage rpc)\r\n{\r\n\tif (HasFlag(Flags.Reserved7) && IsPowered() && chargePower >= chargeNeededForSupplies)\r\n\t{\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(supplyPlanePrefab.resourcePath);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tVector3 position = dropPoints[Random.Range(0, dropPoints.Length)].position;\r\n\t\t\tVector3 vector = new Vector3(Random.Range(-3f, 3f), 0f, Random.Range(-3f, 3f));\r\n\t\t\tbaseEntity.SendMessage(\"InitDropPosition\", position + vector, SendMessageOptions.DontRequireReceiver);\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t}\r\n\t\tchargePower -= chargeNeededForSupplies;\r\n\t\tSetFlag(Flags.Reserved7, b: false);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n}\r\n",
    "OnHorseLead (BaseRidableAnimal_RPC_Lead)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void RPC_Lead(RPCMessage msg)\r\n{\r\n\tBasePlayer player = msg.player;\r\n\tif (!(player == null) && !HasDriver() && !IsForSale())\r\n\t{\r\n\t\tbool num = IsLeading();\r\n\t\tbool flag = msg.read.Bit();\r\n\t\tif (num != flag)\r\n\t\t{\r\n\t\t\tSetLeading(flag ? player : null);\r\n\t\t\tLeadingChanged();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnHotAirBalloonToggle (HotAirBalloon_EngineSwitch_OnHotAirBalloonToggle)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void EngineSwitch(RPCMessage msg)\r\n{\r\n\tbool b = msg.read.Bit();\r\n\tSetFlag(Flags.On, b);\r\n\tif (IsOn())\r\n\t{\r\n\t\tInvoke(ScheduleOff, 60f);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tCancelInvoke(ScheduleOff);\r\n\t}\r\n}\r\n",
    "OnHotAirBalloonToggled (HotAirBalloon_EngineSwitch_OnHotAirBalloonToggled)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void EngineSwitch(RPCMessage msg)\r\n{\r\n\tbool b = msg.read.Bit();\r\n\tSetFlag(Flags.On, b);\r\n\tif (IsOn())\r\n\t{\r\n\t\tInvoke(ScheduleOff, 60f);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tCancelInvoke(ScheduleOff);\r\n\t}\r\n}\r\n",
    "OnRecyclerToggle (Recycler_SVSwitch)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\nprivate void SVSwitch(RPCMessage msg)\r\n{\r\n\tbool flag = msg.read.Bit();\r\n\tif (flag == IsOn() || msg.player == null || (flag && !HasRecyclable()))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (flag)\r\n\t{\r\n\t\tforeach (Item item in base.inventory.itemList)\r\n\t\t{\r\n\t\t\titem.CollectedForCrafting(msg.player);\r\n\t\t}\r\n\t\tStartRecycling();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tStopRecycling();\r\n\t}\r\n}\r\n",
    "OnSprinklerSplashed (Sprinkler_DoSplash)": "using System.Collections.Generic;\r\nusing ConVar;\r\nusing Facepunch;\r\nusing UnityEngine;\r\n\r\nprivate void DoSplash()\r\n{\r\n\tusing (TimeWarning.New(\"SprinklerSplash\"))\r\n\t{\r\n\t\tint num = WaterPerSplash;\r\n\t\tif ((float)updateSplashableCache > SplashFrequency * 4f || forceUpdateSplashables)\r\n\t\t{\r\n\t\t\tcachedSplashables.Clear();\r\n\t\t\tforceUpdateSplashables = false;\r\n\t\t\tupdateSplashableCache = 0f;\r\n\t\t\tVector3 position = Eyes.position;\r\n\t\t\tVector3 up = base.transform.up;\r\n\t\t\tfloat sprinklerEyeHeightOffset = Server.sprinklerEyeHeightOffset;\r\n\t\t\tfloat value = Vector3.Angle(up, Vector3.up) / 180f;\r\n\t\t\tvalue = Mathf.Clamp(value, 0.2f, 1f);\r\n\t\t\tsprinklerEyeHeightOffset *= value;\r\n\t\t\tVector3 startPosition = position + up * (Server.sprinklerRadius * 0.5f);\r\n\t\t\tVector3 endPosition = position + up * sprinklerEyeHeightOffset;\r\n\t\t\tList<BaseEntity> obj = Facepunch.Pool.GetList<BaseEntity>();\r\n\t\t\tVis.Entities(startPosition, endPosition, Server.sprinklerRadius, obj, 1236478737);\r\n\t\t\tif (obj.Count > 0)\r\n\t\t\t{\r\n\t\t\t\tforeach (BaseEntity item in obj)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!item.isClient && item is ISplashable splashable && !cachedSplashables.Contains(splashable) && splashable.WantsSplash(currentFuelType, num) && item.IsVisible(position) && (!(item is IOEntity entity) || !IsConnectedTo(entity, IOEntity.backtracking)))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcachedSplashables.Add(splashable);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tFacepunch.Pool.FreeList(ref obj);\r\n\t\t}\r\n\t\tif (cachedSplashables.Count > 0)\r\n\t\t{\r\n\t\t\tint amount = num / cachedSplashables.Count;\r\n\t\t\tforeach (ISplashable cachedSplashable in cachedSplashables)\r\n\t\t\t{\r\n\t\t\t\tif (!cachedSplashable.IsUnityNull() && cachedSplashable.WantsSplash(currentFuelType, amount))\r\n\t\t\t\t{\r\n\t\t\t\t\tint num2 = cachedSplashable.DoSplash(currentFuelType, amount);\r\n\t\t\t\t\tnum -= num2;\r\n\t\t\t\t\tif (num <= 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (DecayPerSplash > 0f)\r\n\t\t{\r\n\t\t\tHurt(DecayPerSplash);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnSupplyDropDropped (CargoPlane_Update)": "using UnityEngine;\r\n\r\nprivate void Update()\r\n{\r\n\tif (!base.isServer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tsecondsTaken += Time.deltaTime;\r\n\tfloat num = Mathf.InverseLerp(0f, secondsToTake, secondsTaken);\r\n\tif (!dropped && num >= 0.5f)\r\n\t{\r\n\t\tdropped = true;\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(prefabDrop.resourcePath, base.transform.position);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tbaseEntity.globalBroadcast = true;\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t}\r\n\t}\r\n\tbase.transform.position = Vector3.Lerp(startPos, endPos, num);\r\n\tbase.transform.hasChanged = true;\r\n\tif (num >= 1f)\r\n\t{\r\n\t\tKill();\r\n\t}\r\n}\r\n",
    "OnTurretTarget (AutoTurret_SetTarget)": "using UnityEngine;\r\n\r\npublic void SetTarget(BaseCombatEntity targ)\r\n{\r\n\tif (targ != target)\r\n\t{\r\n\t\tEffect.server.Run((targ == null) ? targetLostEffect.resourcePath : targetAcquiredEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\tMarkDirtyForceUpdateOutputs();\r\n\t\tnextShotTime += 0.1f;\r\n\t}\r\n\ttarget = targ;\r\n}\r\n",
    "CanDesignFirework (PatternFirework_PlayerCanModify)": "private bool PlayerCanModify(BasePlayer player)\r\n{\r\n\tif (player == null || !player.CanInteract())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tBuildingPrivlidge buildingPrivilege = GetBuildingPrivilege();\r\n\tif (buildingPrivilege != null && !buildingPrivilege.CanAdministrate(player))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "OnFireworkDesignChange (PatternFirework_ServerSetFireworkDesign_OnFireworkDesignChange)": "using ProtoBuf;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\n[RPC_Server.CallsPerSecond(5uL)]\r\nprivate void ServerSetFireworkDesign(RPCMessage rpc)\r\n{\r\n\tif (!PlayerCanModify(rpc.player))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tProtoBuf.PatternFirework.Design design = ProtoBuf.PatternFirework.Design.Deserialize(rpc.read);\r\n\tif (design?.stars != null)\r\n\t{\r\n\t\twhile (design.stars.Count > MaxStars)\r\n\t\t{\r\n\t\t\tint index = design.stars.Count - 1;\r\n\t\t\tdesign.stars[index].Dispose();\r\n\t\t\tdesign.stars.RemoveAt(index);\r\n\t\t}\r\n\t\tforeach (ProtoBuf.PatternFirework.Star star in design.stars)\r\n\t\t{\r\n\t\t\tstar.position = new Vector2(Mathf.Clamp(star.position.x, -1f, 1f), Mathf.Clamp(star.position.y, -1f, 1f));\r\n\t\t\tstar.color = new Color(Mathf.Clamp01(star.color.r), Mathf.Clamp01(star.color.g), Mathf.Clamp01(star.color.b), 1f);\r\n\t\t}\r\n\t\tdesign.editedBy = rpc.player.userID;\r\n\t}\r\n\tDesign?.Dispose();\r\n\tDesign = design;\r\n\tSendNetworkUpdateImmediate();\r\n}\r\n",
    "OnFireworkDesignChanged (PatternFirework_ServerSetFireworkDesign_OnFireworkDesignChanged)": "using ProtoBuf;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\n[RPC_Server.CallsPerSecond(5uL)]\r\nprivate void ServerSetFireworkDesign(RPCMessage rpc)\r\n{\r\n\tif (!PlayerCanModify(rpc.player))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tProtoBuf.PatternFirework.Design design = ProtoBuf.PatternFirework.Design.Deserialize(rpc.read);\r\n\tif (design?.stars != null)\r\n\t{\r\n\t\twhile (design.stars.Count > MaxStars)\r\n\t\t{\r\n\t\t\tint index = design.stars.Count - 1;\r\n\t\t\tdesign.stars[index].Dispose();\r\n\t\t\tdesign.stars.RemoveAt(index);\r\n\t\t}\r\n\t\tforeach (ProtoBuf.PatternFirework.Star star in design.stars)\r\n\t\t{\r\n\t\t\tstar.position = new Vector2(Mathf.Clamp(star.position.x, -1f, 1f), Mathf.Clamp(star.position.y, -1f, 1f));\r\n\t\t\tstar.color = new Color(Mathf.Clamp01(star.color.r), Mathf.Clamp01(star.color.g), Mathf.Clamp01(star.color.b), 1f);\r\n\t\t}\r\n\t\tdesign.editedBy = rpc.player.userID;\r\n\t}\r\n\tDesign?.Dispose();\r\n\tDesign = design;\r\n\tSendNetworkUpdateImmediate();\r\n}\r\n",
    "OnFireworkExhausted (BaseFirework_OnExhausted)": "public virtual void OnExhausted()\r\n{\r\n\tSetFlag(Flags.Reserved8, b: true, recursive: false, networkupdate: false);\r\n\tSetFlag(Flags.OnFire, b: false, recursive: false, networkupdate: false);\r\n\tSetFlag(Flags.On, b: false, recursive: false, networkupdate: false);\r\n\tEnableGlobalBroadcast(wants: false);\r\n\tSendNetworkUpdate_Flags();\r\n\tInvoke(Cleanup, corpseDuration);\r\n\t_activeFireworks.Remove(this);\r\n}\r\n",
    "OnFireworkStarted (BaseFirework_Begin)": "public virtual void Begin()\r\n{\r\n\tSetFlag(Flags.OnFire, b: false);\r\n\tSetFlag(Flags.On, b: true, recursive: false, networkupdate: false);\r\n\tSendNetworkUpdate_Flags();\r\n\tInvoke(OnExhausted, activityLength);\r\n}\r\n",
    "CanCombineDroppedItem (DroppedItem_OnDroppedOn)": "using UnityEngine;\r\n\r\npublic void OnDroppedOn(DroppedItem di)\r\n{\r\n\tif (item == null || di.item == null || di.item.info != item.info || (di.item.IsBlueprint() && di.item.blueprintTarget != item.blueprintTarget) || (di.item.hasCondition && di.item.condition != di.item.maxCondition) || (item.hasCondition && item.condition != item.maxCondition))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (di.item.info != null)\r\n\t{\r\n\t\tif (di.item.info.amountType == ItemDefinition.AmountType.Genetics)\r\n\t\t{\r\n\t\t\tint num = ((di.item.instanceData != null) ? di.item.instanceData.dataInt : (-1));\r\n\t\t\tint num2 = ((item.instanceData != null) ? item.instanceData.dataInt : (-1));\r\n\t\t\tif (num != num2)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ((di.item.info.GetComponent<ItemModSign>() != null && ItemModAssociatedEntity<SignContent>.GetAssociatedEntity(di.item) != null) || (item.info != null && item.info.GetComponent<ItemModSign>() != null && ItemModAssociatedEntity<SignContent>.GetAssociatedEntity(item) != null))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tint num3 = di.item.amount + item.amount;\r\n\tif (num3 <= item.MaxStackable() && num3 != 0)\r\n\t{\r\n\t\tdi.DestroyItem();\r\n\t\tdi.Kill();\r\n\t\titem.amount = num3;\r\n\t\titem.MarkDirty();\r\n\t\tif (GetDespawnDuration() < float.PositiveInfinity)\r\n\t\t{\r\n\t\t\tInvoke(IdleDestroy, GetDespawnDuration());\r\n\t\t}\r\n\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/notice/stack.world.fx.prefab\", this, 0u, Vector3.zero, Vector3.zero);\r\n\t}\r\n}\r\n",
    "CanCraft (ItemCrafter_CanCraft)": "public bool CanCraft(ItemBlueprint bp, int amount = 1, bool free = false)\r\n{\r\n\tfloat num = (float)amount / (float)bp.targetItem.craftingStackable;\r\n\tforeach (ItemCraftTask item in queue)\r\n\t{\r\n\t\tif (!item.cancelled)\r\n\t\t{\r\n\t\t\tnum += (float)item.amount / (float)item.blueprint.targetItem.craftingStackable;\r\n\t\t}\r\n\t}\r\n\tif (num > 8f)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (amount < 1 || amount > bp.targetItem.craftingStackable)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tforeach (ItemAmount ingredient in bp.ingredients)\r\n\t{\r\n\t\tif (!DoesHaveUsableItem(ingredient.itemid, (int)ingredient.amount * amount))\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "CanDropActiveItem (BasePlayer_ShouldDropActiveItem)": "public virtual bool ShouldDropActiveItem()\r\n{\r\n\treturn true;\r\n}\r\n",
    "CanMoveItem (CanMoveItem)": "using UnityEngine;\r\n\r\n[BaseEntity.RPC_Server]\r\n[BaseEntity.RPC_Server.FromOwner]\r\npublic void MoveItem(BaseEntity.RPCMessage msg)\r\n{\r\n\tuint num = msg.read.UInt32();\r\n\tuint num2 = msg.read.UInt32();\r\n\tint iTargetPos = msg.read.Int8();\r\n\tint num3 = (int)msg.read.UInt32();\r\n\tItem item = FindItemUID(num);\r\n\tif (item == null)\r\n\t{\r\n\t\tmsg.player.ChatMessage(\"Invalid item (\" + num + \")\");\r\n\t\treturn;\r\n\t}\r\n\tBaseEntity entityOwner = item.GetEntityOwner();\r\n\tif (!CanMoveItemsFrom(entityOwner, item))\r\n\t{\r\n\t\tmsg.player.ChatMessage(\"Cannot move item!\");\r\n\t\treturn;\r\n\t}\r\n\tif (num3 <= 0)\r\n\t{\r\n\t\tnum3 = item.amount;\r\n\t}\r\n\tnum3 = Mathf.Clamp(num3, 1, item.MaxStackable());\r\n\tif (msg.player.GetActiveItem() == item)\r\n\t{\r\n\t\tmsg.player.UpdateActiveItem(0u);\r\n\t}\r\n\tif (num2 == 0)\r\n\t{\r\n\t\tBaseEntity baseEntity = entityOwner;\r\n\t\tif (loot.containers.Count > 0)\r\n\t\t{\r\n\t\t\tbaseEntity = ((entityOwner == base.baseEntity) ? loot.entitySource : base.baseEntity);\r\n\t\t}\r\n\t\tif (baseEntity is IIdealSlotEntity idealSlotEntity)\r\n\t\t{\r\n\t\t\tnum2 = idealSlotEntity.GetIdealContainer(base.baseEntity, item);\r\n\t\t}\r\n\t\tItemContainer parent = item.parent;\r\n\t\tif (parent != null && parent.IsLocked())\r\n\t\t{\r\n\t\t\tmsg.player.ChatMessage(\"Container is locked!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (num2 == 0)\r\n\t\t{\r\n\t\t\tif (baseEntity == loot.entitySource)\r\n\t\t\t{\r\n\t\t\t\tforeach (ItemContainer container in loot.containers)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (!container.PlayerItemInputBlocked() && !container.IsLocked() && item.MoveToContainer(container, -1, allowStack: true, ignoreStackLimit: false, base.baseEntity))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif (!GiveItem(item))\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ChatMessage(\"GiveItem failed!\");\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tItemContainer itemContainer = FindContainer(num2);\r\n\tif (itemContainer == null)\r\n\t{\r\n\t\tmsg.player.ChatMessage(\"Invalid container (\" + num2 + \")\");\r\n\t\treturn;\r\n\t}\r\n\tif (itemContainer.IsLocked())\r\n\t{\r\n\t\tmsg.player.ChatMessage(\"Container is locked!\");\r\n\t\treturn;\r\n\t}\r\n\tif (itemContainer.PlayerItemInputBlocked())\r\n\t{\r\n\t\tmsg.player.ChatMessage(\"Container does not accept player items!\");\r\n\t\treturn;\r\n\t}\r\n\tusing (TimeWarning.New(\"Split\"))\r\n\t{\r\n\t\tif (item.amount > num3)\r\n\t\t{\r\n\t\t\tint split_Amount = num3;\r\n\t\t\tif (itemContainer.maxStackSize > 0)\r\n\t\t\t{\r\n\t\t\t\tsplit_Amount = Mathf.Min(num3, itemContainer.maxStackSize);\r\n\t\t\t}\r\n\t\t\tItem item2 = item.SplitItem(split_Amount);\r\n\t\t\tif (!item2.MoveToContainer(itemContainer, iTargetPos, allowStack: true, ignoreStackLimit: false, base.baseEntity))\r\n\t\t\t{\r\n\t\t\t\titem.amount += item2.amount;\r\n\t\t\t\titem2.Remove();\r\n\t\t\t}\r\n\t\t\tItemManager.DoRemoves();\r\n\t\t\tServerUpdate(0f);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (item.MoveToContainer(itemContainer, iTargetPos, allowStack: true, ignoreStackLimit: false, base.baseEntity))\r\n\t{\r\n\t\tItemManager.DoRemoves();\r\n\t\tServerUpdate(0f);\r\n\t}\r\n}\r\n",
    "CanStackItem (PlayerInventory_MoveItem)": "public bool CanStack(Item item)\r\n{\r\n\tif (item == this)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (MaxStackable() <= 1)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (item.MaxStackable() <= 1)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (item.info.itemid != info.itemid)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (hasCondition && condition != item.info.condition.max)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (item.hasCondition && item.condition != item.info.condition.max)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!IsValid())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (IsBlueprint() && blueprintTarget != item.blueprintTarget)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (item.skin != skin)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (item.info.amountType == ItemDefinition.AmountType.Genetics || info.amountType == ItemDefinition.AmountType.Genetics)\r\n\t{\r\n\t\tint num = ((item.instanceData != null) ? item.instanceData.dataInt : (-1));\r\n\t\tint num2 = ((instanceData != null) ? instanceData.dataInt : (-1));\r\n\t\tif (num != num2)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\tif (instanceData != null && instanceData.subEntity != 0 && (bool)info.GetComponent<ItemModSign>())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (item.instanceData != null && item.instanceData.subEntity != 0 && (bool)item.info.GetComponent<ItemModSign>())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "OnIngredientsCollect (ItemCrafter_CollectIngredients)": "using System.Collections.Generic;\r\n\r\nprivate void CollectIngredients(ItemBlueprint bp, ItemCraftTask task, int amount = 1, BasePlayer player = null)\r\n{\r\n\tList<Item> list = new List<Item>();\r\n\tforeach (ItemAmount ingredient in bp.ingredients)\r\n\t{\r\n\t\tCollectIngredient(ingredient.itemid, (int)ingredient.amount * amount, list);\r\n\t}\r\n\ttask.potentialOwners = new List<ulong>();\r\n\tforeach (Item item in list)\r\n\t{\r\n\t\titem.CollectedForCrafting(player);\r\n\t\tif (!task.potentialOwners.Contains(player.userID))\r\n\t\t{\r\n\t\t\ttask.potentialOwners.Add(player.userID);\r\n\t\t}\r\n\t}\r\n\ttask.takenItems = list;\r\n}\r\n",
    "OnItemAction (PlayerInventory_ItemCmd)": "[BaseEntity.RPC_Server]\r\n[BaseEntity.RPC_Server.FromOwner]\r\nprivate void ItemCmd(BaseEntity.RPCMessage msg)\r\n{\r\n\tif (msg.player != null && msg.player.IsWounded())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tuint id = msg.read.UInt32();\r\n\tstring text = msg.read.String();\r\n\tItem item = FindItemUID(id);\r\n\tif (item == null || item.IsLocked() || !CanMoveItemsFrom(item.GetEntityOwner(), item))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (text == \"drop\")\r\n\t{\r\n\t\tint num = item.amount;\r\n\t\tif (msg.read.Unread >= 4)\r\n\t\t{\r\n\t\t\tnum = msg.read.Int32();\r\n\t\t}\r\n\t\tbase.baseEntity.stats.Add(\"item_drop\", 1, (Stats)5);\r\n\t\tif (num < item.amount)\r\n\t\t{\r\n\t\t\titem.SplitItem(num)?.Drop(base.baseEntity.GetDropPosition(), base.baseEntity.GetDropVelocity());\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\titem.Drop(base.baseEntity.GetDropPosition(), base.baseEntity.GetDropVelocity());\r\n\t\t}\r\n\t\tbase.baseEntity.SignalBroadcast(BaseEntity.Signal.Gesture, \"drop_item\");\r\n\t}\r\n\telse\r\n\t{\r\n\t\titem.ServerCommand(text, base.baseEntity);\r\n\t\tItemManager.DoRemoves();\r\n\t\tServerUpdate(0f);\r\n\t}\r\n}\r\n",
    "OnItemCraft (ItemCrafter_CraftItem)": "using Facepunch;\r\nusing ProtoBuf;\r\n\r\npublic bool CraftItem(ItemBlueprint bp, BasePlayer owner, ProtoBuf.Item.InstanceData instanceData = null, int amount = 1, int skinID = 0, Item fromTempBlueprint = null, bool free = false)\r\n{\r\n\tif (!CanCraft(bp, amount, free))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\ttaskUID++;\r\n\tItemCraftTask itemCraftTask = Pool.Get<ItemCraftTask>();\r\n\titemCraftTask.blueprint = bp;\r\n\tif (!free)\r\n\t{\r\n\t\tCollectIngredients(bp, itemCraftTask, amount, owner);\r\n\t}\r\n\titemCraftTask.endTime = 0f;\r\n\titemCraftTask.taskUID = taskUID;\r\n\titemCraftTask.owner = owner;\r\n\titemCraftTask.instanceData = instanceData;\r\n\tif (itemCraftTask.instanceData != null)\r\n\t{\r\n\t\titemCraftTask.instanceData.ShouldPool = false;\r\n\t}\r\n\titemCraftTask.amount = amount;\r\n\titemCraftTask.skinID = skinID;\r\n\tif (fromTempBlueprint != null && itemCraftTask.takenItems != null)\r\n\t{\r\n\t\tfromTempBlueprint.RemoveFromContainer();\r\n\t\titemCraftTask.takenItems.Add(fromTempBlueprint);\r\n\t\titemCraftTask.conditionScale = 0.5f;\r\n\t}\r\n\tqueue.AddLast(itemCraftTask);\r\n\tif (itemCraftTask.owner != null)\r\n\t{\r\n\t\titemCraftTask.owner.Command(\"note.craft_add\", itemCraftTask.taskUID, itemCraftTask.blueprint.targetItem.itemid, amount, itemCraftTask.skinID);\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "OnItemCraftCancelled (ItemCrafter_CancelTask)": "using System.Linq;\r\nusing UnityEngine;\r\n\r\npublic bool CancelTask(int iID, bool ReturnItems)\r\n{\r\n\tif (queue.Count == 0)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tItemCraftTask itemCraftTask = queue.FirstOrDefault((ItemCraftTask x) => x.taskUID == iID && !x.cancelled);\r\n\tif (itemCraftTask == null)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\titemCraftTask.cancelled = true;\r\n\tif (itemCraftTask.owner == null)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\titemCraftTask.owner.Command(\"note.craft_done\", itemCraftTask.taskUID, 0);\r\n\tif (itemCraftTask.takenItems != null && itemCraftTask.takenItems.Count > 0 && ReturnItems)\r\n\t{\r\n\t\tforeach (Item takenItem in itemCraftTask.takenItems)\r\n\t\t{\r\n\t\t\tif (takenItem != null && takenItem.amount > 0)\r\n\t\t\t{\r\n\t\t\t\tif (takenItem.IsBlueprint() && takenItem.blueprintTargetDef == itemCraftTask.blueprint.targetItem)\r\n\t\t\t\t{\r\n\t\t\t\t\ttakenItem.UseItem(itemCraftTask.numCrafted);\r\n\t\t\t\t}\r\n\t\t\t\tif (takenItem.amount > 0 && !takenItem.MoveToContainer(itemCraftTask.owner.inventory.containerMain))\r\n\t\t\t\t{\r\n\t\t\t\t\ttakenItem.Drop(itemCraftTask.owner.inventory.containerMain.dropPosition + Random.value * Vector3.down + Random.insideUnitSphere, itemCraftTask.owner.inventory.containerMain.dropVelocity);\r\n\t\t\t\t\titemCraftTask.owner.Command(\"note.inv\", takenItem.info.itemid, -takenItem.amount);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "OnItemCraftFinished (ItemCrafter_FinishCrafting)": "using System.Linq;\r\nusing Facepunch.Rust;\r\nusing UnityEngine;\r\n\r\nprivate void FinishCrafting(ItemCraftTask task)\r\n{\r\n\ttask.amount--;\r\n\ttask.numCrafted++;\r\n\tulong skin = ItemDefinition.FindSkin(task.blueprint.targetItem.itemid, task.skinID);\r\n\tItem item = ItemManager.CreateByItemID(task.blueprint.targetItem.itemid, 1, skin);\r\n\titem.amount = task.blueprint.amountToCreate;\r\n\tint amount = item.amount;\r\n\tif (item.hasCondition && task.conditionScale != 1f)\r\n\t{\r\n\t\titem.maxCondition *= task.conditionScale;\r\n\t\titem.condition = item.maxCondition;\r\n\t}\r\n\titem.OnVirginSpawn();\r\n\tforeach (ItemAmount ingredient in task.blueprint.ingredients)\r\n\t{\r\n\t\tint num = (int)ingredient.amount;\r\n\t\tif (task.takenItems == null)\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tforeach (Item takenItem in task.takenItems)\r\n\t\t{\r\n\t\t\tif (takenItem.info == ingredient.itemDef)\r\n\t\t\t{\r\n\t\t\t\tint num2 = Mathf.Min(takenItem.amount, num);\r\n\t\t\t\ttakenItem.UseItem(num);\r\n\t\t\t\tnum -= num2;\r\n\t\t\t}\r\n\t\t\t_ = 0;\r\n\t\t}\r\n\t}\r\n\tAnalytics.Server.Crafting(task.blueprint.targetItem.shortname, task.skinID);\r\n\ttask.owner.Command(\"note.craft_done\", task.taskUID, 1, task.amount);\r\n\tif (task.instanceData != null)\r\n\t{\r\n\t\titem.instanceData = task.instanceData;\r\n\t}\r\n\tif (!string.IsNullOrEmpty(task.blueprint.UnlockAchievment))\r\n\t{\r\n\t\ttask.owner.GiveAchievement(task.blueprint.UnlockAchievment);\r\n\t}\r\n\tif (task.owner.inventory.GiveItem(item))\r\n\t{\r\n\t\ttask.owner.Command(\"note.inv\", item.info.itemid, amount);\r\n\t\treturn;\r\n\t}\r\n\tItemContainer itemContainer = containers.First();\r\n\ttask.owner.Command(\"note.inv\", item.info.itemid, amount);\r\n\ttask.owner.Command(\"note.inv\", item.info.itemid, -item.amount);\r\n\titem.Drop(itemContainer.dropPosition, itemContainer.dropVelocity);\r\n}\r\n",
    "OnItemDeployed (Deployer_OnItemDeployed)": "using ConVar;\r\nusing UnityEngine;\r\n\r\npublic void DoDeploy_Regular(Deployable deployable, Ray ray)\r\n{\r\n\tif (!HasItemAmount())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (!ownerPlayer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (!ownerPlayer.CanBuild())\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Building is blocked at player position!\");\r\n\t}\r\n\telse if (ConVar.AntiHack.objectplacement && ownerPlayer.TriggeredAntiHack())\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"AntiHack!\");\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (!CheckPlacement(deployable, ray, 8f) || !UnityEngine.Physics.Raycast(ray, out var hitInfo, 8f, 1235288065))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tVector3 point = hitInfo.point;\r\n\t\tQuaternion deployedRotation = GetDeployedRotation(hitInfo.normal, ray.direction);\r\n\t\tItem ownerItem = GetOwnerItem();\r\n\t\tItemModDeployable modDeployable = GetModDeployable();\r\n\t\tif (ownerPlayer.Distance(point) > 3f)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Too far away!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (!ownerPlayer.CanBuild(point, deployedRotation, deployable.bounds))\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Building is blocked at placement position!\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(modDeployable.entityPrefab.resourcePath, point, deployedRotation);\r\n\t\tif (!baseEntity)\r\n\t\t{\r\n\t\t\tDebug.LogWarning(\"Couldn't create prefab:\" + modDeployable.entityPrefab.resourcePath);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tbaseEntity.skinID = ownerItem.skin;\r\n\t\tbaseEntity.SendMessage(\"SetDeployedBy\", ownerPlayer, SendMessageOptions.DontRequireReceiver);\r\n\t\tbaseEntity.OwnerID = ownerPlayer.userID;\r\n\t\tbaseEntity.Spawn();\r\n\t\tmodDeployable.OnDeployed(baseEntity, ownerPlayer);\r\n\t\tUseItemAmount(1);\r\n\t}\r\n}\r\n",
    "OnItemDeployed (Deployer_DoDeploy_Slot)": "using UnityEngine;\r\n\r\npublic void DoDeploy_Slot(Deployable deployable, Ray ray, uint entityID)\r\n{\r\n\tif (!HasItemAmount())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (!ownerPlayer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (!ownerPlayer.CanBuild())\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Building is blocked at player position!\");\r\n\t\treturn;\r\n\t}\r\n\tBaseEntity baseEntity = BaseNetworkable.serverEntities.Find(entityID) as BaseEntity;\r\n\tif (baseEntity == null || !baseEntity.HasSlot(deployable.slot) || baseEntity.GetSlot(deployable.slot) != null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (ownerPlayer.Distance(baseEntity) > 3f)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Too far away!\");\r\n\t\treturn;\r\n\t}\r\n\tif (!ownerPlayer.CanBuild(baseEntity.WorldSpaceBounds()))\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Building is blocked at placement position!\");\r\n\t\treturn;\r\n\t}\r\n\tItem ownerItem = GetOwnerItem();\r\n\tItemModDeployable modDeployable = GetModDeployable();\r\n\tBaseEntity baseEntity2 = GameManager.server.CreateEntity(modDeployable.entityPrefab.resourcePath);\r\n\tif (baseEntity2 != null)\r\n\t{\r\n\t\tbaseEntity2.skinID = ownerItem.skin;\r\n\t\tbaseEntity2.SetParent(baseEntity, baseEntity.GetSlotAnchorName(deployable.slot));\r\n\t\tbaseEntity2.OwnerID = ownerPlayer.userID;\r\n\t\tbaseEntity2.OnDeployed(baseEntity, ownerPlayer, ownerItem);\r\n\t\tbaseEntity2.Spawn();\r\n\t\tbaseEntity.SetSlot(deployable.slot, baseEntity2);\r\n\t\tif (deployable.placeEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(deployable.placeEffect.resourcePath, baseEntity.transform.position, Vector3.up);\r\n\t\t}\r\n\t}\r\n\tmodDeployable.OnDeployed(baseEntity2, ownerPlayer);\r\n\tUseItemAmount(1);\r\n}\r\n",
    "OnItemRemove (Item_Remove)": "using UnityEngine;\r\n\r\npublic void Remove(float fTime = 0f)\r\n{\r\n\tif (removeTime > 0f)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (isServer)\r\n\t{\r\n\t\tItemMod[] itemMods = info.itemMods;\r\n\t\tfor (int i = 0; i < itemMods.Length; i++)\r\n\t\t{\r\n\t\t\titemMods[i].OnRemove(this);\r\n\t\t}\r\n\t}\r\n\tthis.onCycle = null;\r\n\tremoveTime = Time.time + fTime;\r\n\tthis.OnDirty = null;\r\n\tposition = -1;\r\n\tif (isServer)\r\n\t{\r\n\t\tItemManager.RemoveItem(this, fTime);\r\n\t}\r\n}\r\n",
    "OnItemRepair (RepairBench_RepairAnItem)": "using System.Collections.Generic;\r\nusing ConVar;\r\nusing Facepunch;\r\nusing UnityEngine;\r\n\r\npublic static void RepairAnItem(Item itemToRepair, BasePlayer player, BaseEntity repairBenchEntity, float maxConditionLostOnRepair, bool mustKnowBlueprint)\r\n{\r\n\tif (itemToRepair == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tItemDefinition info = itemToRepair.info;\r\n\tItemBlueprint component = info.GetComponent<ItemBlueprint>();\r\n\tif (!component || !info.condition.repairable || itemToRepair.condition == itemToRepair.maxCondition)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (mustKnowBlueprint)\r\n\t{\r\n\t\tItemDefinition itemDefinition = ((info.isRedirectOf != null) ? info.isRedirectOf : info);\r\n\t\tif (!player.blueprints.HasUnlocked(itemDefinition) && (!(itemDefinition.Blueprint != null) || itemDefinition.Blueprint.isResearchable))\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tfloat num = RepairCostFraction(itemToRepair);\r\n\tbool flag = false;\r\n\tList<ItemAmount> obj = Facepunch.Pool.GetList<ItemAmount>();\r\n\tGetRepairCostList(component, obj);\r\n\tforeach (ItemAmount item in obj)\r\n\t{\r\n\t\tif (item.itemDef.category != ItemCategory.Component)\r\n\t\t{\r\n\t\t\tint amount = player.inventory.GetAmount(item.itemDef.itemid);\r\n\t\t\tif (Mathf.CeilToInt(item.amount * num) > amount)\r\n\t\t\t{\r\n\t\t\t\tflag = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (flag)\r\n\t{\r\n\t\tFacepunch.Pool.FreeList(ref obj);\r\n\t\treturn;\r\n\t}\r\n\tforeach (ItemAmount item2 in obj)\r\n\t{\r\n\t\tif (item2.itemDef.category != ItemCategory.Component)\r\n\t\t{\r\n\t\t\tint amount2 = Mathf.CeilToInt(item2.amount * num);\r\n\t\t\tplayer.inventory.Take(null, item2.itemid, amount2);\r\n\t\t}\r\n\t}\r\n\tFacepunch.Pool.FreeList(ref obj);\r\n\titemToRepair.DoRepair(maxConditionLostOnRepair);\r\n\tif (Global.developer > 0)\r\n\t{\r\n\t\tDebug.Log(\"Item repaired! condition : \" + itemToRepair.condition + \"/\" + itemToRepair.maxCondition);\r\n\t}\r\n\tEffect.server.Run(\"assets/bundled/prefabs/fx/repairbench/itemrepair.prefab\", repairBenchEntity, 0u, Vector3.zero, Vector3.zero);\r\n}\r\n",
    "OnItemUse (Item_UseItem)": "public void UseItem(int amountToConsume = 1)\r\n{\r\n\tif (amountToConsume > 0)\r\n\t{\r\n\t\tamount -= amountToConsume;\r\n\t\tif (amount <= 0)\r\n\t\t{\r\n\t\t\tamount = 0;\r\n\t\t\tRemove();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tMarkDirty();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnLoseCondition (Item_LoseCondition)": "using ConVar;\r\nusing UnityEngine;\r\n\r\npublic void LoseCondition(float amount)\r\n{\r\n\tif (hasCondition && !Debugging.disablecondition)\r\n\t{\r\n\t\tfloat num = condition;\r\n\t\tcondition -= amount;\r\n\t\tif (Global.developer > 0)\r\n\t\t{\r\n\t\t\tDebug.Log(info.shortname + \" was damaged by: \" + amount + \"cond is: \" + condition + \"/\" + maxCondition);\r\n\t\t}\r\n\t\tif (condition <= 0f && condition < num)\r\n\t\t{\r\n\t\t\tOnBroken();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "CanAffordUpgrade (BuildingBlock_CanAffordUpgrade)": "private bool CanAffordUpgrade(BuildingGrade.Enum iGrade, BasePlayer player)\r\n{\r\n\tforeach (ItemAmount item in GetGrade(iGrade).costToBuild)\r\n\t{\r\n\t\tif ((float)player.inventory.GetAmount(item.itemid) < item.amount)\r\n\t\t{\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "CanAssignBed (SleepingBag_CanAffordUpgrade)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void AssignToFriend(RPCMessage msg)\r\n{\r\n\tif (!msg.player.CanInteract() || deployerUserID != msg.player.userID)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tulong num = msg.read.UInt64();\r\n\tif (num == 0L)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\tif (activeGameMode != null)\r\n\t{\r\n\t\tBaseGameMode.CanAssignBedResult? canAssignBedResult = activeGameMode.CanAssignBed(msg.player, this, num, 1, -1);\r\n\t\tif (canAssignBedResult.HasValue)\r\n\t\t{\r\n\t\t\tBasePlayer basePlayer = RelationshipManager.FindByID(num);\r\n\t\t\tif (!canAssignBedResult.Value.Result)\r\n\t\t\t{\r\n\t\t\t\tmsg.player.ShowToast(GameTip.Styles.Red_Normal, cannotAssignBedPhrase, basePlayer?.displayName ?? \"other player\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tbasePlayer?.ShowToast(GameTip.Styles.Blue_Long, assignedBagPhrase, canAssignBedResult.Value.Count.ToString(), canAssignBedResult.Value.Max.ToString());\r\n\t\t\t}\r\n\t\t\tif (!canAssignBedResult.Value.Result)\r\n\t\t\t{\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tdeployerUserID = num;\r\n\tSendNetworkUpdate();\r\n}\r\n",
    "CanBuild (Planner_DoBuild_CanBuild)": "using ConVar;\r\nusing ProtoBuf;\r\nusing UnityEngine;\r\n\r\npublic void DoBuild(CreateBuilding msg)\r\n{\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (!ownerPlayer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (ConVar.AntiHack.objectplacement && ownerPlayer.TriggeredAntiHack())\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"AntiHack!\");\r\n\t\treturn;\r\n\t}\r\n\tConstruction construction = PrefabAttribute.server.Find<Construction>(msg.blockID);\r\n\tif (construction == null)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Couldn't find Construction \" + msg.blockID);\r\n\t\treturn;\r\n\t}\r\n\tif (!CanAffordToPlace(construction))\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Can't afford to place!\");\r\n\t\treturn;\r\n\t}\r\n\tif (!ownerPlayer.CanBuild() && !construction.canBypassBuildingPermission)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Building is blocked!\");\r\n\t\treturn;\r\n\t}\r\n\tDeployable deployable = GetDeployable();\r\n\tif (construction.deployable != deployable)\r\n\t{\r\n\t\townerPlayer.ChatMessage(\"Deployable mismatch!\");\r\n\t\tAntiHack.NoteAdminHack(ownerPlayer);\r\n\t\treturn;\r\n\t}\r\n\tBaseGameMode.CanBuildResult? canBuildResult = BaseGameMode.GetActiveGameMode(serverside: true)?.CanBuildEntity(ownerPlayer, construction);\r\n\tif (canBuildResult.HasValue)\r\n\t{\r\n\t\tif (canBuildResult.Value.Phrase != null)\r\n\t\t{\r\n\t\t\townerPlayer.ShowToast((!canBuildResult.Value.Result) ? GameTip.Styles.Red_Normal : GameTip.Styles.Blue_Long, canBuildResult.Value.Phrase, canBuildResult.Value.Arguments);\r\n\t\t}\r\n\t\tif (!canBuildResult.Value.Result)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tConstruction.Target target = default(Construction.Target);\r\n\tif (msg.entity != 0)\r\n\t{\r\n\t\ttarget.entity = BaseNetworkable.serverEntities.Find(msg.entity) as BaseEntity;\r\n\t\tif (target.entity == null)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Couldn't find entity \" + msg.entity);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tmsg.position = target.entity.transform.TransformPoint(msg.position);\r\n\t\tmsg.normal = target.entity.transform.TransformDirection(msg.normal);\r\n\t\tmsg.rotation = target.entity.transform.rotation * msg.rotation;\r\n\t\tif (msg.socket != 0)\r\n\t\t{\r\n\t\t\tstring text = StringPool.Get(msg.socket);\r\n\t\t\tif (text != \"\")\r\n\t\t\t{\r\n\t\t\t\ttarget.socket = FindSocket(text, target.entity.prefabID);\r\n\t\t\t}\r\n\t\t\tif (target.socket == null)\r\n\t\t\t{\r\n\t\t\t\townerPlayer.ChatMessage(\"Couldn't find socket \" + msg.socket);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (target.entity is Door)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Can't deploy on door\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\ttarget.ray = msg.ray;\r\n\ttarget.onTerrain = msg.onterrain;\r\n\ttarget.position = msg.position;\r\n\ttarget.normal = msg.normal;\r\n\ttarget.rotation = msg.rotation;\r\n\ttarget.player = ownerPlayer;\r\n\ttarget.valid = true;\r\n\tif (target.entity != null && deployable != null && deployable.setSocketParent)\r\n\t{\r\n\t\tVector3 position = ((target.socket != null) ? target.GetWorldPosition() : target.position);\r\n\t\tfloat num = target.entity.Distance(position);\r\n\t\tif (num > 1f)\r\n\t\t{\r\n\t\t\townerPlayer.ChatMessage(\"Parent too far away: \" + num);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tDoBuild(target, construction);\r\n}\r\n",
    "CanBypassQueue (ConnectionQueue_CanJumpQueue)": "using Network;\r\n\r\nprivate bool CanJumpQueue(Connection connection)\r\n{\r\n\tif (DeveloperList.Contains(connection.userid))\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tServerUsers.User user = ServerUsers.Get(connection.userid);\r\n\tif (user != null && user.group == ServerUsers.UserGroup.Moderator)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tif (user != null && user.group == ServerUsers.UserGroup.Owner)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tif (user != null && user.group == ServerUsers.UserGroup.SkipQueue)\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n",
    "CanDeployItem (Deployer_DoDeploy)": "using UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsActiveItem]\r\nprivate void DoDeploy(RPCMessage msg)\r\n{\r\n\tif (!msg.player.CanInteract())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tDeployable deployable = GetDeployable();\r\n\tif (!(deployable == null))\r\n\t{\r\n\t\tRay ray = msg.read.Ray();\r\n\t\tuint entityID = msg.read.UInt32();\r\n\t\tif (deployable.toSlot)\r\n\t\t{\r\n\t\t\tDoDeploy_Slot(deployable, ray, entityID);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tDoDeploy_Regular(deployable, ray);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "CanLock (KeyLock_Lock)": "private void Lock(BasePlayer player)\r\n{\r\n\tif (!(player == null) && player.CanInteract() && !IsLocked() && HasLockPermission(player))\r\n\t{\r\n\t\tLockLock(player);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n}\r\n",
    "CanLock (CodeLock_Lock)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\nprivate void TryLock(RPCMessage rpc)\r\n{\r\n\tif (rpc.player.CanInteract() && !IsLocked() && code.Length == 4 && whitelistPlayers.Contains(rpc.player.userID))\r\n\t{\r\n\t\tDoEffect(effectLocked.resourcePath);\r\n\t\tSetFlag(Flags.Locked, b: true);\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n}\r\n",
    "CanLootEntity (StorageContainer_PlayerOpenLoot)": "public virtual bool PlayerOpenLoot(BasePlayer player, string panelToOpen = \"\", bool doPositionChecks = true)\r\n{\r\n\tif (IsLocked())\r\n\t{\r\n\t\tplayer.ShowToast(GameTip.Styles.Red_Normal, LockedMessage);\r\n\t\treturn false;\r\n\t}\r\n\tif (onlyOneUser && IsOpen())\r\n\t{\r\n\t\tplayer.ShowToast(GameTip.Styles.Red_Normal, InUseMessage);\r\n\t\treturn false;\r\n\t}\r\n\tif (panelToOpen == \"\")\r\n\t{\r\n\t\tpanelToOpen = panelName;\r\n\t}\r\n\tif (!CanOpenLootPanel(player, panelToOpen))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (player.inventory.loot.StartLootingEntity(this, doPositionChecks))\r\n\t{\r\n\t\tSetFlag(Flags.Open, b: true);\r\n\t\tAddContainers(player.inventory.loot);\r\n\t\tplayer.inventory.loot.SendImmediate();\r\n\t\tplayer.ClientRPCPlayer(null, player, \"RPC_OpenLootPanel\", panelToOpen);\r\n\t\tSendNetworkUpdate();\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n",
    "CanLootEntity (ContainerIOEntity_PlayerOpenLoot)": "public virtual bool PlayerOpenLoot(BasePlayer player, string panelToOpen = \"\", bool doPositionChecks = true)\r\n{\r\n\tif (needsBuildingPrivilegeToUse && !player.CanBuild())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (onlyOneUser && IsOpen())\r\n\t{\r\n\t\tplayer.ChatMessage(\"Already in use\");\r\n\t\treturn false;\r\n\t}\r\n\tif (panelToOpen == \"\")\r\n\t{\r\n\t\tpanelToOpen = lootPanelName;\r\n\t}\r\n\tif (player.inventory.loot.StartLootingEntity(this, doPositionChecks))\r\n\t{\r\n\t\tSetFlag(Flags.Open, b: true);\r\n\t\tplayer.inventory.loot.AddContainer(inventory);\r\n\t\tplayer.inventory.loot.SendImmediate();\r\n\t\tplayer.ClientRPCPlayer(null, player, \"RPC_OpenLootPanel\", lootPanelName);\r\n\t\tSendNetworkUpdate();\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n",
    "CanLootEntity (LootableCorpse_RPC_LootCorpse)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\nprivate void RPC_LootCorpse(RPCMessage rpc)\r\n{\r\n\tBasePlayer player = rpc.player;\r\n\tif (!player || !player.CanInteract() || !CanLoot() || containers == null || !player.inventory.loot.StartLootingEntity(this))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tSetFlag(Flags.Open, b: true);\r\n\tfor (int i = 0; i < containers.Length; i++)\r\n\t{\r\n\t\tItemContainer itemContainer = containers[i];\r\n\t\tif (CanLootContainer(itemContainer, i))\r\n\t\t{\r\n\t\t\tplayer.inventory.loot.AddContainer(itemContainer);\r\n\t\t}\r\n\t}\r\n\tplayer.inventory.loot.SendImmediate();\r\n\tClientRPCPlayer(null, player, \"RPC_ClientLootCorpse\");\r\n\tSendNetworkUpdate();\r\n}\r\n",
    "CanLootEntity (DroppedItemContainer_RPC_OpenLoot)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\nprivate void RPC_OpenLoot(RPCMessage rpc)\r\n{\r\n\tif (inventory != null)\r\n\t{\r\n\t\tBasePlayer player = rpc.player;\r\n\t\tif ((bool)player && player.CanInteract() && player.inventory.loot.StartLootingEntity(this))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Open, b: true);\r\n\t\t\tplayer.inventory.loot.AddContainer(inventory);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.ClientRPCPlayer(null, player, \"RPC_OpenLootPanel\", lootPanelName);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "CanLootEntity (BaseRidableAnimal_RPC_OpenLoot)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\nprivate void RPC_OpenLoot(RPCMessage rpc)\r\n{\r\n\tif (inventory != null)\r\n\t{\r\n\t\tBasePlayer player = rpc.player;\r\n\t\tif ((bool)player && player.CanInteract() && CanOpenStorage(player) && (!needsBuildingPrivilegeToUse || player.CanBuild()) && player.inventory.loot.StartLootingEntity(this))\r\n\t\t{\r\n\t\t\tplayer.inventory.loot.AddContainer(inventory);\r\n\t\t\tplayer.inventory.loot.SendImmediate();\r\n\t\t\tplayer.ClientRPCPlayer(null, player, \"RPC_OpenLootPanel\", lootPanelName);\r\n\t\t\tSendNetworkUpdate();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "CanLootEntity (ResourceContainer_StartLootingContainer)": "using UnityEngine;\r\n\r\n[BaseEntity.RPC_Server]\r\n[BaseEntity.RPC_Server.IsVisible(3f)]\r\nprivate void StartLootingContainer(BaseEntity.RPCMessage msg)\r\n{\r\n\tBasePlayer player = msg.player;\r\n\tif ((bool)player && player.CanInteract() && lootable && player.inventory.loot.StartLootingEntity(base.baseEntity))\r\n\t{\r\n\t\tlastAccessTime = Time.realtimeSinceStartup;\r\n\t\tplayer.inventory.loot.AddContainer(container);\r\n\t}\r\n}\r\n",
    "CanLootPlayer (BasePlayer_CanBeLooted)": "public override bool CanBeLooted(BasePlayer player)\r\n{\r\n\tif (player == this)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!IsWounded())\r\n\t{\r\n\t\treturn IsSleeping();\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "CanPickupEntity (BaseCombatEntity_CanPickup)": "public virtual bool CanPickup(BasePlayer player)\r\n{\r\n\tif (pickup.enabled)\r\n\t{\r\n\t\tif (!pickup.requireBuildingPrivilege || player.CanBuild())\r\n\t\t{\r\n\t\t\tif (pickup.requireHammer)\r\n\t\t\t{\r\n\t\t\t\treturn player.IsHoldingEntity<Hammer>();\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\treturn false;\r\n}\r\n",
    "CanUseLockedEntity (KeyLock_OnTryToClose)": "public override bool OnTryToClose(BasePlayer player)\r\n{\r\n\tif (HasLockPermission(player))\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\treturn !IsLocked();\r\n}\r\n",
    "CanUseLockedEntity (CodeLock_OnTryToClose)": "public override bool OnTryToClose(BasePlayer player)\r\n{\r\n\tif (!IsLocked())\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tif (whitelistPlayers.Contains(player.userID) || guestPlayers.Contains(player.userID))\r\n\t{\r\n\t\tDoEffect(effectUnlocked.resourcePath);\r\n\t\treturn true;\r\n\t}\r\n\tDoEffect(effectDenied.resourcePath);\r\n\treturn false;\r\n}\r\n",
    "CanUseLockedEntity (KeyLock_OnTryToOpen)": "public override bool OnTryToOpen(BasePlayer player)\r\n{\r\n\tif (HasLockPermission(player))\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\treturn !IsLocked();\r\n}\r\n",
    "CanUseLockedEntity (CodeLock_OnTryToOpen)": "public override bool OnTryToOpen(BasePlayer player)\r\n{\r\n\tif (!IsLocked())\r\n\t{\r\n\t\treturn true;\r\n\t}\r\n\tif (whitelistPlayers.Contains(player.userID) || guestPlayers.Contains(player.userID))\r\n\t{\r\n\t\tDoEffect(effectUnlocked.resourcePath);\r\n\t\treturn true;\r\n\t}\r\n\tDoEffect(effectDenied.resourcePath);\r\n\treturn false;\r\n}\r\n",
    "CanUseWires (WireTool_CanPlayerUseWires)": "using System.Collections.Generic;\r\nusing System.Linq;\r\nusing Facepunch;\r\nusing UnityEngine;\r\n\r\npublic static bool CanPlayerUseWires(BasePlayer player)\r\n{\r\n\tif (!player.CanBuild())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tList<Collider> obj = Pool.GetList<Collider>();\r\n\tGamePhysics.OverlapSphere(player.eyes.position, 0.1f, obj, 536870912, QueryTriggerInteraction.Collide);\r\n\tbool result = obj.All((Collider collider) => collider.gameObject.CompareTag(\"IgnoreWireCheck\"));\r\n\tPool.FreeList(ref obj);\r\n\treturn result;\r\n}\r\n",
    "OnAnalysisComplete (SurveyCrater_AnalysisComplete)": "[RPC_Server]\r\npublic void AnalysisComplete(RPCMessage msg)\r\n{\r\n}\r\n",
    "OnCodeEntered (CodeLock_UnlockWithCode)": "using Rust;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\nprivate void UnlockWithCode(RPCMessage rpc)\r\n{\r\n\tif (!rpc.player.CanInteract() || !IsLocked() || IsCodeEntryBlocked())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tstring text = rpc.read.String();\r\n\tbool flag = text == guestCode;\r\n\tbool flag2 = text == code;\r\n\tif (!(text == code) && (!hasGuestCode || !(text == guestCode)))\r\n\t{\r\n\t\tif (Time.realtimeSinceStartup > lastWrongTime + 60f)\r\n\t\t{\r\n\t\t\twrongCodes = 0;\r\n\t\t}\r\n\t\tDoEffect(effectDenied.resourcePath);\r\n\t\tDoEffect(effectShock.resourcePath);\r\n\t\trpc.player.Hurt((float)(wrongCodes + 1) * 5f, DamageType.ElectricShock, this, useProtection: false);\r\n\t\twrongCodes++;\r\n\t\tif (wrongCodes > 5)\r\n\t\t{\r\n\t\t\trpc.player.ShowToast(GameTip.Styles.Red_Normal, blockwarning);\r\n\t\t}\r\n\t\tif ((float)wrongCodes >= maxFailedAttempts)\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved11, b: true);\r\n\t\t\tInvoke(ClearCodeEntryBlocked, lockoutCooldown);\r\n\t\t}\r\n\t\tlastWrongTime = Time.realtimeSinceStartup;\r\n\t\treturn;\r\n\t}\r\n\tSendNetworkUpdate();\r\n\tif (flag2)\r\n\t{\r\n\t\tif (!whitelistPlayers.Contains(rpc.player.userID))\r\n\t\t{\r\n\t\t\tDoEffect(effectCodeChanged.resourcePath);\r\n\t\t\twhitelistPlayers.Add(rpc.player.userID);\r\n\t\t\twrongCodes = 0;\r\n\t\t}\r\n\t}\r\n\telse if (flag && !guestPlayers.Contains(rpc.player.userID))\r\n\t{\r\n\t\tDoEffect(effectCodeChanged.resourcePath);\r\n\t\tguestPlayers.Add(rpc.player.userID);\r\n\t}\r\n}\r\n",
    "OnCorpsePopulate (ScarecrowNPC_CreateCorpse)": "using UnityEngine;\r\n\r\npublic override BaseCorpse CreateCorpse()\r\n{\r\n\tusing (TimeWarning.New(\"Create corpse\"))\r\n\t{\r\n\t\tNPCPlayerCorpse nPCPlayerCorpse = DropCorpse(\"assets/prefabs/npc/murderer/murderer_corpse.prefab\") as NPCPlayerCorpse;\r\n\t\tif ((bool)nPCPlayerCorpse)\r\n\t\t{\r\n\t\t\tnPCPlayerCorpse.transform.position = nPCPlayerCorpse.transform.position + Vector3.down * NavAgent.baseOffset;\r\n\t\t\tnPCPlayerCorpse.SetLootableIn(2f);\r\n\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));\r\n\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved2, b: true);\r\n\t\t\tnPCPlayerCorpse.TakeFrom(inventory.containerMain, inventory.containerWear, inventory.containerBelt);\r\n\t\t\tnPCPlayerCorpse.playerName = OverrideCorpseName();\r\n\t\t\tnPCPlayerCorpse.playerSteamID = userID;\r\n\t\t\tnPCPlayerCorpse.Spawn();\r\n\t\t\tItemContainer[] containers = nPCPlayerCorpse.containers;\r\n\t\t\tfor (int i = 0; i < containers.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tcontainers[i].Clear();\r\n\t\t\t}\r\n\t\t\tif (LootSpawnSlots.Length != 0)\r\n\t\t\t{\r\n\t\t\t\tLootContainer.LootSpawnSlot[] lootSpawnSlots = LootSpawnSlots;\r\n\t\t\t\tfor (int i = 0; i < lootSpawnSlots.Length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tLootContainer.LootSpawnSlot lootSpawnSlot = lootSpawnSlots[i];\r\n\t\t\t\t\tfor (int j = 0; j < lootSpawnSlot.numberToSpawn; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Random.Range(0f, 1f) <= lootSpawnSlot.probability)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlootSpawnSlot.definition.SpawnIntoContainer(nPCPlayerCorpse.containers[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nPCPlayerCorpse;\r\n\t}\r\n}\r\n",
    "OnCorpsePopulate (HumanNPC_CreateCorpse)": "using UnityEngine;\r\n\r\npublic override BaseCorpse CreateCorpse()\r\n{\r\n\tusing (TimeWarning.New(\"Create corpse\"))\r\n\t{\r\n\t\tNPCPlayerCorpse nPCPlayerCorpse = DropCorpse(\"assets/prefabs/npc/scientist/scientist_corpse.prefab\") as NPCPlayerCorpse;\r\n\t\tif ((bool)nPCPlayerCorpse)\r\n\t\t{\r\n\t\t\tnPCPlayerCorpse.transform.position = nPCPlayerCorpse.transform.position + Vector3.down * NavAgent.baseOffset;\r\n\t\t\tnPCPlayerCorpse.SetLootableIn(2f);\r\n\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));\r\n\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved2, b: true);\r\n\t\t\tnPCPlayerCorpse.TakeFrom(inventory.containerMain, inventory.containerWear, inventory.containerBelt);\r\n\t\t\tnPCPlayerCorpse.playerName = OverrideCorpseName();\r\n\t\t\tnPCPlayerCorpse.playerSteamID = userID;\r\n\t\t\tnPCPlayerCorpse.Spawn();\r\n\t\t\tnPCPlayerCorpse.TakeChildren(this);\r\n\t\t\tfor (int i = 0; i < nPCPlayerCorpse.containers.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tItemContainer itemContainer = nPCPlayerCorpse.containers[i];\r\n\t\t\t\tif (i != 1)\r\n\t\t\t\t{\r\n\t\t\t\t\titemContainer.Clear();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (LootSpawnSlots.Length != 0)\r\n\t\t\t{\r\n\t\t\t\tLootContainer.LootSpawnSlot[] lootSpawnSlots = LootSpawnSlots;\r\n\t\t\t\tfor (int j = 0; j < lootSpawnSlots.Length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tLootContainer.LootSpawnSlot lootSpawnSlot = lootSpawnSlots[j];\r\n\t\t\t\t\tfor (int k = 0; k < lootSpawnSlot.numberToSpawn; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (Random.Range(0f, 1f) <= lootSpawnSlot.probability)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlootSpawnSlot.definition.SpawnIntoContainer(nPCPlayerCorpse.containers[0]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nPCPlayerCorpse;\r\n\t}\r\n}\r\n",
    "OnCorpsePopulate (FrankensteinPet_CreateCorpse)": "using UnityEngine;\r\n\r\npublic override BaseCorpse CreateCorpse()\r\n{\r\n\tusing (TimeWarning.New(\"Create corpse\"))\r\n\t{\r\n\t\tNPCPlayerCorpse nPCPlayerCorpse = DropCorpse(\"assets/rust.ai/agents/NPCPlayer/pet/frankensteinpet_corpse.prefab\") as NPCPlayerCorpse;\r\n\t\tif ((bool)nPCPlayerCorpse)\r\n\t\t{\r\n\t\t\tnPCPlayerCorpse.transform.position = nPCPlayerCorpse.transform.position + Vector3.down * NavAgent.baseOffset;\r\n\t\t\tnPCPlayerCorpse.SetLootableIn(2f);\r\n\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));\r\n\t\t\tnPCPlayerCorpse.SetFlag(Flags.Reserved2, b: true);\r\n\t\t\tnPCPlayerCorpse.TakeFrom(inventory.containerMain, inventory.containerWear, inventory.containerBelt);\r\n\t\t\tnPCPlayerCorpse.playerName = OverrideCorpseName();\r\n\t\t\tnPCPlayerCorpse.playerSteamID = userID;\r\n\t\t\tnPCPlayerCorpse.Spawn();\r\n\t\t\tItemContainer[] containers = nPCPlayerCorpse.containers;\r\n\t\t\tfor (int i = 0; i < containers.Length; i++)\r\n\t\t\t{\r\n\t\t\t\tcontainers[i].Clear();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nPCPlayerCorpse;\r\n\t}\r\n}\r\n",
    "OnLootEntity (PlayerLoot_StartLootingEntity)": "#define UNITY_ASSERTIONS\r\nusing UnityEngine.Assertions;\r\n\r\npublic bool StartLootingEntity(BaseEntity targetEntity, bool doPositionChecks = true)\r\n{\r\n\tClear();\r\n\tif (!targetEntity)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (!targetEntity.OnStartBeingLooted(base.baseEntity))\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tAssert.IsTrue(targetEntity.isServer, \"Assure is server\");\r\n\tPositionChecks = doPositionChecks;\r\n\tentitySource = targetEntity;\r\n\titemSource = null;\r\n\tMarkDirty();\r\n\treturn true;\r\n}\r\n",
    "OnLootEntityEnd (LootableCorpse_PlayerStoppedLooting)": "public void PlayerStoppedLooting(BasePlayer player)\r\n{\r\n\tResetRemovalTime();\r\n\tSetFlag(Flags.Open, b: false);\r\n\tSendNetworkUpdate();\r\n}\r\n",
    "OnLootEntityEnd (StorageContainer_PlayerStoppedLooting)": "public virtual void PlayerStoppedLooting(BasePlayer player)\r\n{\r\n\tSetFlag(Flags.Open, b: false);\r\n\tSendNetworkUpdate();\r\n}\r\n",
    "OnLootEntityEnd (ItemBasedFlowRestrictor_PlayerStoppedLooting)": "public void PlayerStoppedLooting(BasePlayer player)\r\n{\r\n}\r\n",
    "OnLootEntityEnd (DroppedItemContainer_PlayerStoppedLooting)": "public void PlayerStoppedLooting(BasePlayer player)\r\n{\r\n\tif (inventory == null || inventory.itemList == null || inventory.itemList.Count == 0)\r\n\t{\r\n\t\tKill();\r\n\t\treturn;\r\n\t}\r\n\tResetRemovalTime();\r\n\tSetFlag(Flags.Open, b: false);\r\n\tSendNetworkUpdate();\r\n}\r\n",
    "OnLootEntityEnd (ContainerIOEntity_PlayerStoppedLooting)": "public virtual void PlayerStoppedLooting(BasePlayer player)\r\n{\r\n\tSetFlag(Flags.Open, b: false);\r\n\tSendNetworkUpdate();\r\n}\r\n",
    "OnMeleeAttack (BaseMelee_PlayerAttack)": "using ConVar;\r\nusing Facepunch;\r\nusing ProtoBuf;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsActiveItem]\r\npublic void PlayerAttack(RPCMessage msg)\r\n{\r\n\tBasePlayer player = msg.player;\r\n\tif (!VerifyClientAttack(player))\r\n\t{\r\n\t\tSendNetworkUpdate();\r\n\t\treturn;\r\n\t}\r\n\tusing (TimeWarning.New(\"PlayerAttack\", 50))\r\n\t{\r\n\t\tusing PlayerAttack playerAttack = ProtoBuf.PlayerAttack.Deserialize(msg.read);\r\n\t\tif (playerAttack == null)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tHitInfo hitInfo = Facepunch.Pool.Get<HitInfo>();\r\n\t\thitInfo.LoadFromAttack(playerAttack.attack, serverSide: true);\r\n\t\thitInfo.Initiator = player;\r\n\t\thitInfo.Weapon = this;\r\n\t\thitInfo.WeaponPrefab = this;\r\n\t\thitInfo.Predicted = msg.connection;\r\n\t\thitInfo.damageProperties = damageProperties;\r\n\t\tif (hitInfo.IsNaNOrInfinity())\r\n\t\t{\r\n\t\t\tstring shortPrefabName = base.ShortPrefabName;\r\n\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Contains NaN (\" + shortPrefabName + \")\");\r\n\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_nan\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tBaseEntity hitEntity = hitInfo.HitEntity;\r\n\t\tBasePlayer basePlayer = hitInfo.HitEntity as BasePlayer;\r\n\t\tbool flag = basePlayer != null;\r\n\t\tbool flag2 = flag && basePlayer.IsSleeping();\r\n\t\tbool flag3 = flag && basePlayer.IsWounded();\r\n\t\tbool flag4 = flag && basePlayer.isMounted;\r\n\t\tbool flag5 = flag && basePlayer.HasParent();\r\n\t\tbool flag6 = hitEntity != null;\r\n\t\tbool flag7 = flag6 && hitEntity.IsNpc;\r\n\t\tbool flag8;\r\n\t\tint layerMask;\r\n\t\tVector3 center;\r\n\t\tVector3 position;\r\n\t\tVector3 vector;\r\n\t\tVector3 vector2;\r\n\t\tVector3 vector3;\r\n\t\tint num15;\r\n\t\tif (ConVar.AntiHack.melee_protection > 0)\r\n\t\t{\r\n\t\t\tflag8 = true;\r\n\t\t\tfloat num = 1f + ConVar.AntiHack.melee_forgiveness;\r\n\t\t\tfloat melee_clientframes = ConVar.AntiHack.melee_clientframes;\r\n\t\t\tfloat melee_serverframes = ConVar.AntiHack.melee_serverframes;\r\n\t\t\tfloat num2 = melee_clientframes / 60f;\r\n\t\t\tfloat num3 = melee_serverframes * Mathx.Max(UnityEngine.Time.deltaTime, UnityEngine.Time.smoothDeltaTime, UnityEngine.Time.fixedDeltaTime);\r\n\t\t\tfloat num4 = (player.desyncTimeClamped + num2 + num3) * num;\r\n\t\t\tlayerMask = (ConVar.AntiHack.melee_terraincheck ? 10551296 : 2162688);\r\n\t\t\tif (flag && hitInfo.boneArea == (HitArea)(-1))\r\n\t\t\t{\r\n\t\t\t\tstring shortPrefabName2 = base.ShortPrefabName;\r\n\t\t\t\tstring shortPrefabName3 = basePlayer.ShortPrefabName;\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Bone is invalid  (\" + shortPrefabName2 + \" on \" + shortPrefabName3 + \" bone \" + hitInfo.HitBone + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_bone\");\r\n\t\t\t\tflag8 = false;\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.melee_protection >= 2)\r\n\t\t\t{\r\n\t\t\t\tif (flag6)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num5 = hitEntity.MaxVelocity() + hitEntity.GetParentVelocity().magnitude;\r\n\t\t\t\t\tfloat num6 = hitEntity.BoundsPadding() + num4 * num5;\r\n\t\t\t\t\tfloat num7 = hitEntity.Distance(hitInfo.HitPositionWorld);\r\n\t\t\t\t\tif (num7 > num6)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring shortPrefabName4 = base.ShortPrefabName;\r\n\t\t\t\t\t\tstring shortPrefabName5 = hitEntity.ShortPrefabName;\r\n\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Entity too far away (\" + shortPrefabName4 + \" on \" + shortPrefabName5 + \" with \" + num7 + \"m > \" + num6 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_target\");\r\n\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (ConVar.AntiHack.melee_protection >= 4 && flag8 && flag && !flag7 && !flag2 && !flag3 && !flag4 && !flag5)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat magnitude = basePlayer.GetParentVelocity().magnitude;\r\n\t\t\t\t\tfloat num8 = basePlayer.BoundsPadding() + num4 * magnitude + ConVar.AntiHack.tickhistoryforgiveness;\r\n\t\t\t\t\tfloat num9 = basePlayer.tickHistory.Distance(basePlayer, hitInfo.HitPositionWorld);\r\n\t\t\t\t\tif (num9 > num8)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring shortPrefabName6 = base.ShortPrefabName;\r\n\t\t\t\t\t\tstring shortPrefabName7 = basePlayer.ShortPrefabName;\r\n\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Player too far away (\" + shortPrefabName6 + \" on \" + shortPrefabName7 + \" with \" + num9 + \"m > \" + num8 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"player_distance\");\r\n\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.melee_protection >= 1)\r\n\t\t\t{\r\n\t\t\t\tif (ConVar.AntiHack.melee_protection >= 4)\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat magnitude2 = player.GetParentVelocity().magnitude;\r\n\t\t\t\t\tfloat num10 = player.BoundsPadding() + num4 * magnitude2 + num * maxDistance;\r\n\t\t\t\t\tfloat num11 = player.tickHistory.Distance(player, hitInfo.HitPositionWorld);\r\n\t\t\t\t\tif (num11 > num10)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring shortPrefabName8 = base.ShortPrefabName;\r\n\t\t\t\t\t\tstring text = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Initiator too far away (\" + shortPrefabName8 + \" on \" + text + \" with \" + num11 + \"m > \" + num10 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_initiator\");\r\n\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfloat num12 = player.MaxVelocity() + player.GetParentVelocity().magnitude;\r\n\t\t\t\t\tfloat num13 = player.BoundsPadding() + num4 * num12 + num * maxDistance;\r\n\t\t\t\t\tfloat num14 = player.Distance(hitInfo.HitPositionWorld);\r\n\t\t\t\t\tif (num14 > num13)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tstring shortPrefabName9 = base.ShortPrefabName;\r\n\t\t\t\t\t\tstring text2 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, \"Initiator too far away (\" + shortPrefabName9 + \" on \" + text2 + \" with \" + num14 + \"m > \" + num13 + \"m in \" + num4 + \"s)\");\r\n\t\t\t\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_initiator\");\r\n\t\t\t\t\t\tflag8 = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (ConVar.AntiHack.melee_protection >= 3)\r\n\t\t\t{\r\n\t\t\t\tif (flag6)\r\n\t\t\t\t{\r\n\t\t\t\t\tVector3 pointStart = hitInfo.PointStart;\r\n\t\t\t\t\tVector3 hitPositionWorld = hitInfo.HitPositionWorld;\r\n\t\t\t\t\tcenter = player.eyes.center;\r\n\t\t\t\t\tposition = player.eyes.position;\r\n\t\t\t\t\tvector = pointStart;\r\n\t\t\t\t\tvector2 = hitInfo.PositionOnRay(hitPositionWorld) + hitInfo.HitNormalWorld.normalized * 0.001f;\r\n\t\t\t\t\tvector3 = hitPositionWorld;\r\n\t\t\t\t\tif (GamePhysics.LineOfSight(center, position, layerMask) && GamePhysics.LineOfSight(position, vector, layerMask) && GamePhysics.LineOfSight(vector, vector2, layerMask))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum15 = (GamePhysics.LineOfSight(vector2, vector3, layerMask, hitEntity) ? 1 : 0);\r\n\t\t\t\t\t\tif (num15 != 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tplayer.stats.Add(\"hit_\" + hitEntity.Categorize() + \"_direct_los\", 1, Stats.Server);\r\n\t\t\t\t\t\t\tgoto IL_06f9;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum15 = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tplayer.stats.Add(\"hit_\" + hitEntity.Categorize() + \"_indirect_los\", 1, Stats.Server);\r\n\t\t\t\t\tgoto IL_06f9;\r\n\t\t\t\t}\r\n\t\t\t\tgoto IL_07b4;\r\n\t\t\t}\r\n\t\t\tgoto IL_08f2;\r\n\t\t}\r\n\t\tgoto IL_0904;\r\n\t\tIL_06f9:\r\n\t\tif (num15 == 0)\r\n\t\t{\r\n\t\t\tstring shortPrefabName10 = base.ShortPrefabName;\r\n\t\t\tstring shortPrefabName11 = hitEntity.ShortPrefabName;\r\n\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, string.Concat(\"Line of sight (\", shortPrefabName10, \" on \", shortPrefabName11, \") \", center, \" \", position, \" \", vector, \" \", vector2, \" \", vector3));\r\n\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_los\");\r\n\t\t\tflag8 = false;\r\n\t\t}\r\n\t\tgoto IL_07b4;\r\n\t\tIL_0904:\r\n\t\tplayer.metabolism.UseHeart(heartStress * 0.2f);\r\n\t\tusing (TimeWarning.New(\"DoAttackShared\", 50))\r\n\t\t{\r\n\t\t\tDoAttackShared(hitInfo);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tIL_07b4:\r\n\t\tif (flag8 && flag && !flag7)\r\n\t\t{\r\n\t\t\tVector3 hitPositionWorld2 = hitInfo.HitPositionWorld;\r\n\t\t\tVector3 position2 = basePlayer.eyes.position;\r\n\t\t\tVector3 vector4 = basePlayer.CenterPoint();\r\n\t\t\tfloat melee_losforgiveness = ConVar.AntiHack.melee_losforgiveness;\r\n\t\t\tbool flag9 = GamePhysics.LineOfSight(hitPositionWorld2, position2, layerMask, 0f, melee_losforgiveness) && GamePhysics.LineOfSight(position2, hitPositionWorld2, layerMask, melee_losforgiveness, 0f);\r\n\t\t\tif (!flag9)\r\n\t\t\t{\r\n\t\t\t\tflag9 = GamePhysics.LineOfSight(hitPositionWorld2, vector4, layerMask, 0f, melee_losforgiveness) && GamePhysics.LineOfSight(vector4, hitPositionWorld2, layerMask, melee_losforgiveness, 0f);\r\n\t\t\t}\r\n\t\t\tif (!flag9)\r\n\t\t\t{\r\n\t\t\t\tstring shortPrefabName12 = base.ShortPrefabName;\r\n\t\t\t\tstring shortPrefabName13 = basePlayer.ShortPrefabName;\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.MeleeHack, string.Concat(\"Line of sight (\", shortPrefabName12, \" on \", shortPrefabName13, \") \", hitPositionWorld2, \" \", position2, \" or \", hitPositionWorld2, \" \", vector4));\r\n\t\t\t\tplayer.stats.combat.LogInvalid(hitInfo, \"melee_los\");\r\n\t\t\t\tflag8 = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tgoto IL_08f2;\r\n\t\tIL_08f2:\r\n\t\tif (!flag8)\r\n\t\t{\r\n\t\t\tAntiHack.AddViolation(player, AntiHackType.MeleeHack, ConVar.AntiHack.melee_penalty);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tgoto IL_0904;\r\n\t}\r\n}\r\n",
    "OnPlayerAttack (BaseMelee_DoAttackShared)": "public virtual void DoAttackShared(HitInfo info)\r\n{\r\n\tGetAttackStats(info);\r\n\tif (info.HitEntity != null)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"OnAttacked\", 50))\r\n\t\t{\r\n\t\t\tinfo.HitEntity.OnAttacked(info);\r\n\t\t}\r\n\t}\r\n\tif (info.DoHitEffects)\r\n\t{\r\n\t\tif (base.isServer)\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"ImpactEffect\", 20))\r\n\t\t\t{\r\n\t\t\t\tEffect.server.ImpactEffect(info);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"ImpactEffect\", 20))\r\n\t\t\t{\r\n\t\t\t\tEffect.client.ImpactEffect(info);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (base.isServer && !base.IsDestroyed)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"UpdateItemCondition\", 50))\r\n\t\t{\r\n\t\t\tUpdateItemCondition(info);\r\n\t\t}\r\n\t\tStartAttackCooldown(repeatDelay);\r\n\t}\r\n}\r\n",
    "OnPlayerAttack (BasePlayer_OnProjectileAttack)": "using ConVar;\r\nusing ProtoBuf;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.FromOwner]\r\npublic void OnProjectileAttack(RPCMessage msg)\r\n{\r\n\tPlayerProjectileAttack playerProjectileAttack = PlayerProjectileAttack.Deserialize(msg.read);\r\n\tif (playerProjectileAttack == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tPlayerAttack playerAttack = playerProjectileAttack.playerAttack;\r\n\tHitInfo hitInfo = new HitInfo();\r\n\thitInfo.LoadFromAttack(playerAttack.attack, serverSide: true);\r\n\thitInfo.Initiator = this;\r\n\thitInfo.ProjectileID = playerAttack.projectileID;\r\n\thitInfo.ProjectileDistance = playerProjectileAttack.hitDistance;\r\n\thitInfo.ProjectileVelocity = playerProjectileAttack.hitVelocity;\r\n\thitInfo.Predicted = msg.connection;\r\n\tif (hitInfo.IsNaNOrInfinity() || float.IsNaN(playerProjectileAttack.travelTime) || float.IsInfinity(playerProjectileAttack.travelTime))\r\n\t{\r\n\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Contains NaN (\" + playerAttack.projectileID + \")\");\r\n\t\tplayerProjectileAttack.ResetToPool();\r\n\t\tplayerProjectileAttack = null;\r\n\t\tstats.combat.LogInvalid(hitInfo, \"projectile_nan\");\r\n\t\treturn;\r\n\t}\r\n\tif (!firedProjectiles.TryGetValue(playerAttack.projectileID, out var value))\r\n\t{\r\n\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Missing ID (\" + playerAttack.projectileID + \")\");\r\n\t\tplayerProjectileAttack.ResetToPool();\r\n\t\tplayerProjectileAttack = null;\r\n\t\tstats.combat.LogInvalid(hitInfo, \"projectile_invalid\");\r\n\t\treturn;\r\n\t}\r\n\thitInfo.ProjectileHits = value.hits;\r\n\thitInfo.ProjectileIntegrity = value.integrity;\r\n\thitInfo.ProjectileTravelTime = value.travelTime;\r\n\thitInfo.ProjectileTrajectoryMismatch = value.trajectoryMismatch;\r\n\tif (value.integrity <= 0f)\r\n\t{\r\n\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Integrity is zero (\" + playerAttack.projectileID + \")\");\r\n\t\tplayerProjectileAttack.ResetToPool();\r\n\t\tplayerProjectileAttack = null;\r\n\t\tstats.combat.LogInvalid(hitInfo, \"projectile_integrity\");\r\n\t\treturn;\r\n\t}\r\n\tif (value.firedTime < UnityEngine.Time.realtimeSinceStartup - 8f)\r\n\t{\r\n\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Lifetime is zero (\" + playerAttack.projectileID + \")\");\r\n\t\tplayerProjectileAttack.ResetToPool();\r\n\t\tplayerProjectileAttack = null;\r\n\t\tstats.combat.LogInvalid(hitInfo, \"projectile_lifetime\");\r\n\t\treturn;\r\n\t}\r\n\tif (value.ricochets > 0)\r\n\t{\r\n\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile is ricochet (\" + playerAttack.projectileID + \")\");\r\n\t\tplayerProjectileAttack.ResetToPool();\r\n\t\tplayerProjectileAttack = null;\r\n\t\tstats.combat.LogInvalid(hitInfo, \"projectile_ricochet\");\r\n\t\treturn;\r\n\t}\r\n\thitInfo.Weapon = value.weaponSource;\r\n\thitInfo.WeaponPrefab = value.weaponPrefab;\r\n\thitInfo.ProjectilePrefab = value.projectilePrefab;\r\n\thitInfo.damageProperties = value.projectilePrefab.damageProperties;\r\n\tVector3 position = value.position;\r\n\tVector3 velocity = value.velocity;\r\n\tfloat partialTime = value.partialTime;\r\n\tfloat travelTime = value.travelTime;\r\n\tfloat num = Mathf.Clamp(playerProjectileAttack.travelTime, value.travelTime, 8f);\r\n\tVector3 gravity = UnityEngine.Physics.gravity * value.projectilePrefab.gravityModifier;\r\n\tfloat drag = value.projectilePrefab.drag;\r\n\tint layerMask = (ConVar.AntiHack.projectile_terraincheck ? 10551296 : 2162688);\r\n\tBaseEntity hitEntity = hitInfo.HitEntity;\r\n\tBasePlayer basePlayer = hitEntity as BasePlayer;\r\n\tbool flag = basePlayer != null;\r\n\tbool flag2 = flag && basePlayer.IsSleeping();\r\n\tbool flag3 = flag && basePlayer.IsWounded();\r\n\tbool flag4 = flag && basePlayer.isMounted;\r\n\tbool flag5 = flag && basePlayer.HasParent();\r\n\tbool flag6 = hitEntity != null;\r\n\tbool flag7 = flag6 && hitEntity.IsNpc;\r\n\tbool flag8 = hitInfo.HitMaterial == Projectile.WaterMaterialID();\r\n\tbool flag9;\r\n\tVector3 position2;\r\n\tVector3 pointStart;\r\n\tVector3 hitPositionWorld;\r\n\tVector3 vector;\r\n\tint num23;\r\n\tif (value.protection > 0)\r\n\t{\r\n\t\tflag9 = true;\r\n\t\tfloat num2 = 1f + ConVar.AntiHack.projectile_forgiveness;\r\n\t\tfloat num3 = 1f - ConVar.AntiHack.projectile_forgiveness;\r\n\t\tfloat projectile_clientframes = ConVar.AntiHack.projectile_clientframes;\r\n\t\tfloat projectile_serverframes = ConVar.AntiHack.projectile_serverframes;\r\n\t\tfloat num4 = Mathx.Decrement(value.firedTime);\r\n\t\tfloat num5 = Mathf.Clamp(Mathx.Increment(UnityEngine.Time.realtimeSinceStartup) - num4, 0f, 8f);\r\n\t\tfloat num6 = num;\r\n\t\tfloat num7 = (value.desyncLifeTime = Mathf.Abs(num5 - num6));\r\n\t\tfloat num8 = Mathf.Min(num5, num6);\r\n\t\tfloat num9 = projectile_clientframes / 60f;\r\n\t\tfloat num10 = projectile_serverframes * Mathx.Max(UnityEngine.Time.deltaTime, UnityEngine.Time.smoothDeltaTime, UnityEngine.Time.fixedDeltaTime);\r\n\t\tfloat num11 = (desyncTimeClamped + num8 + num9 + num10) * num2;\r\n\t\tfloat num12 = ((value.protection >= 6) ? ((desyncTimeClamped + num9 + num10) * num2) : num11);\r\n\t\tfloat num13 = (num5 - desyncTimeClamped - num9 - num10) * num3;\r\n\t\tif (flag && hitInfo.boneArea == (HitArea)(-1))\r\n\t\t{\r\n\t\t\tstring text = hitInfo.ProjectilePrefab.name;\r\n\t\t\tstring text2 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Bone is invalid (\" + text + \" on \" + text2 + \" bone \" + hitInfo.HitBone + \")\");\r\n\t\t\tstats.combat.LogInvalid(hitInfo, \"projectile_bone\");\r\n\t\t\tflag9 = false;\r\n\t\t}\r\n\t\tif (flag8)\r\n\t\t{\r\n\t\t\tif (flag6)\r\n\t\t\t{\r\n\t\t\t\tstring text3 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\tstring text4 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile water hit on entity (\" + text3 + \" on \" + text4 + \")\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"water_entity\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t\tif (!WaterLevel.Test(hitInfo.HitPositionWorld - 0.5f * Vector3.up, waves: false, this))\r\n\t\t\t{\r\n\t\t\t\tstring text5 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\tstring text6 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile water level (\" + text5 + \" on \" + text6 + \")\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"water_level\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (value.protection >= 2)\r\n\t\t{\r\n\t\t\tif (flag6)\r\n\t\t\t{\r\n\t\t\t\tfloat num14 = hitEntity.MaxVelocity() + hitEntity.GetParentVelocity().magnitude;\r\n\t\t\t\tfloat num15 = hitEntity.BoundsPadding() + num12 * num14;\r\n\t\t\t\tfloat num16 = hitEntity.Distance(hitInfo.HitPositionWorld);\r\n\t\t\t\tif (num16 > num15)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring text7 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\t\tstring shortPrefabName = hitEntity.ShortPrefabName;\r\n\t\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Entity too far away (\" + text7 + \" on \" + shortPrefabName + \" with \" + num16 + \"m > \" + num15 + \"m in \" + num12 + \"s)\");\r\n\t\t\t\t\tstats.combat.LogInvalid(hitInfo, \"entity_distance\");\r\n\t\t\t\t\tflag9 = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (value.protection >= 6 && flag9 && flag && !flag7 && !flag2 && !flag3 && !flag4 && !flag5)\r\n\t\t\t{\r\n\t\t\t\tfloat magnitude = basePlayer.GetParentVelocity().magnitude;\r\n\t\t\t\tfloat num17 = basePlayer.BoundsPadding() + num12 * magnitude + ConVar.AntiHack.tickhistoryforgiveness;\r\n\t\t\t\tfloat num18 = basePlayer.tickHistory.Distance(basePlayer, hitInfo.HitPositionWorld);\r\n\t\t\t\tif (num18 > num17)\r\n\t\t\t\t{\r\n\t\t\t\t\tstring text8 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\t\tstring shortPrefabName2 = basePlayer.ShortPrefabName;\r\n\t\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Player too far away (\" + text8 + \" on \" + shortPrefabName2 + \" with \" + num18 + \"m > \" + num17 + \"m in \" + num12 + \"s)\");\r\n\t\t\t\t\tstats.combat.LogInvalid(hitInfo, \"player_distance\");\r\n\t\t\t\t\tflag9 = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (value.protection >= 1)\r\n\t\t{\r\n\t\t\tfloat magnitude2 = value.velocity.magnitude;\r\n\t\t\tfloat magnitude3 = value.initialVelocity.magnitude;\r\n\t\t\tfloat num19 = hitInfo.ProjectilePrefab.initialDistance + num13 * magnitude2;\r\n\t\t\tfloat num20 = hitInfo.ProjectilePrefab.initialDistance + num11 * magnitude3;\r\n\t\t\tfloat num21 = hitInfo.ProjectileDistance + 1f;\r\n\t\t\tfloat num22 = Vector3.Distance(value.initialPosition, hitInfo.HitPositionWorld);\r\n\t\t\tif (num22 < num19)\r\n\t\t\t{\r\n\t\t\t\tstring text9 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\tstring text10 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile too slow (\" + text9 + \" on \" + text10 + \" with \" + num22 + \"m < \" + num19 + \"m in \" + num13 + \"s)\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"projectile_minspeed\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t\tif (num22 > num20)\r\n\t\t\t{\r\n\t\t\t\tstring text11 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\tstring text12 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile too fast (\" + text11 + \" on \" + text12 + \" with \" + num22 + \"m > \" + num20 + \"m in \" + num11 + \"s)\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"projectile_maxspeed\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t\tif (num22 > num21)\r\n\t\t\t{\r\n\t\t\t\tstring text13 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\tstring text14 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile too far away (\" + text13 + \" on \" + text14 + \" with \" + num22 + \"m > \" + num21 + \"m in \" + num11 + \"s)\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"projectile_distance\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t\tif (num7 > ConVar.AntiHack.projectile_desync)\r\n\t\t\t{\r\n\t\t\t\tstring text15 = hitInfo.ProjectilePrefab.name;\r\n\t\t\t\tstring text16 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Projectile desync (\" + text15 + \" on \" + text16 + \" with \" + num7 + \"s > \" + ConVar.AntiHack.projectile_desync + \"s)\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"projectile_desync\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (value.protection >= 3)\r\n\t\t{\r\n\t\t\tposition2 = value.position;\r\n\t\t\tpointStart = hitInfo.PointStart;\r\n\t\t\thitPositionWorld = hitInfo.HitPositionWorld;\r\n\t\t\tvector = hitInfo.PositionOnRay(hitPositionWorld);\r\n\t\t\tif (!flag8 && !flag6)\r\n\t\t\t{\r\n\t\t\t\thitPositionWorld += hitInfo.HitNormalWorld.normalized * 0.001f;\r\n\t\t\t}\r\n\t\t\tif (GamePhysics.LineOfSight(position2, pointStart, layerMask, value.lastEntityHit) && GamePhysics.LineOfSight(pointStart, vector, layerMask, value.lastEntityHit))\r\n\t\t\t{\r\n\t\t\t\tnum23 = (GamePhysics.LineOfSight(vector, hitPositionWorld, layerMask, hitEntity) ? 1 : 0);\r\n\t\t\t\tif (num23 != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tstats.Add(\"hit_\" + (flag6 ? hitEntity.Categorize() : \"world\") + \"_direct_los\", 1, Stats.Server);\r\n\t\t\t\t\tgoto IL_0bfa;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tnum23 = 0;\r\n\t\t\t}\r\n\t\t\tstats.Add(\"hit_\" + (flag6 ? hitEntity.Categorize() : \"world\") + \"_indirect_los\", 1, Stats.Server);\r\n\t\t\tgoto IL_0bfa;\r\n\t\t}\r\n\t\tgoto IL_0dff;\r\n\t}\r\n\tgoto IL_115c;\r\n\tIL_115c:\r\n\tvalue.position = hitInfo.HitPositionWorld;\r\n\tvalue.velocity = playerProjectileAttack.hitVelocity;\r\n\tvalue.travelTime = num;\r\n\tvalue.partialTime = partialTime;\r\n\tvalue.hits++;\r\n\tvalue.lastEntityHit = hitEntity;\r\n\thitInfo.ProjectilePrefab.CalculateDamage(hitInfo, value.projectileModifier, value.integrity);\r\n\tif (value.integrity < 1f)\r\n\t{\r\n\t\tvalue.integrity = 0f;\r\n\t}\r\n\telse if (flag8)\r\n\t{\r\n\t\tvalue.integrity = Mathf.Clamp01(value.integrity - 0.1f);\r\n\t}\r\n\telse if (hitInfo.ProjectilePrefab.penetrationPower <= 0f || !flag6)\r\n\t{\r\n\t\tvalue.integrity = 0f;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfloat num24 = hitEntity.PenetrationResistance(hitInfo) / hitInfo.ProjectilePrefab.penetrationPower;\r\n\t\tvalue.integrity = Mathf.Clamp01(value.integrity - num24);\r\n\t}\r\n\tif (flag6)\r\n\t{\r\n\t\tstats.Add(value.itemMod.category + \"_hit_\" + hitEntity.Categorize(), 1);\r\n\t}\r\n\tif (value.integrity <= 0f)\r\n\t{\r\n\t\tif (value.hits <= 1)\r\n\t\t{\r\n\t\t\tvalue.itemMod.ServerProjectileHit(hitInfo);\r\n\t\t}\r\n\t\tif (hitInfo.ProjectilePrefab.remainInWorld)\r\n\t\t{\r\n\t\t\tCreateWorldProjectile(hitInfo, value.itemDef, value.itemMod, hitInfo.ProjectilePrefab, value.pickupItem);\r\n\t\t}\r\n\t}\r\n\tfiredProjectiles[playerAttack.projectileID] = value;\r\n\tif (flag6)\r\n\t{\r\n\t\tif (value.hits <= 2)\r\n\t\t{\r\n\t\t\thitEntity.OnAttacked(hitInfo);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tstats.combat.LogInvalid(hitInfo, \"ricochet\");\r\n\t\t}\r\n\t}\r\n\thitInfo.DoHitEffects = hitInfo.ProjectilePrefab.doDefaultHitEffects;\r\n\tEffect.server.ImpactEffect(hitInfo);\r\n\tplayerProjectileAttack.ResetToPool();\r\n\tplayerProjectileAttack = null;\r\n\treturn;\r\n\tIL_0bfa:\r\n\tif (num23 == 0)\r\n\t{\r\n\t\tstring text17 = hitInfo.ProjectilePrefab.name;\r\n\t\tstring text18 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, string.Concat(\"Line of sight (\", text17, \" on \", text18, \") \", position2, \" \", pointStart, \" \", vector, \" \", hitPositionWorld));\r\n\t\tstats.combat.LogInvalid(hitInfo, \"projectile_los\");\r\n\t\tflag9 = false;\r\n\t}\r\n\tif (flag9 && flag && !flag7)\r\n\t{\r\n\t\tVector3 hitPositionWorld2 = hitInfo.HitPositionWorld;\r\n\t\tVector3 position3 = basePlayer.eyes.position;\r\n\t\tVector3 vector2 = basePlayer.CenterPoint();\r\n\t\tfloat projectile_losforgiveness = ConVar.AntiHack.projectile_losforgiveness;\r\n\t\tbool flag10 = GamePhysics.LineOfSight(hitPositionWorld2, position3, layerMask, 0f, projectile_losforgiveness) && GamePhysics.LineOfSight(position3, hitPositionWorld2, layerMask, projectile_losforgiveness, 0f);\r\n\t\tif (!flag10)\r\n\t\t{\r\n\t\t\tflag10 = GamePhysics.LineOfSight(hitPositionWorld2, vector2, layerMask, 0f, projectile_losforgiveness) && GamePhysics.LineOfSight(vector2, hitPositionWorld2, layerMask, projectile_losforgiveness, 0f);\r\n\t\t}\r\n\t\tif (!flag10)\r\n\t\t{\r\n\t\t\tstring text19 = hitInfo.ProjectilePrefab.name;\r\n\t\t\tstring text20 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, string.Concat(\"Line of sight (\", text19, \" on \", text20, \") \", hitPositionWorld2, \" \", position3, \" or \", hitPositionWorld2, \" \", vector2));\r\n\t\t\tstats.combat.LogInvalid(hitInfo, \"projectile_los\");\r\n\t\t\tflag9 = false;\r\n\t\t}\r\n\t}\r\n\tgoto IL_0dff;\r\n\tIL_0dff:\r\n\tif (value.protection >= 4)\r\n\t{\r\n\t\tSimulateProjectile(ref position, ref velocity, ref partialTime, num - travelTime, gravity, drag, out var prevPosition, out var prevVelocity);\r\n\t\tVector3 vector3 = prevVelocity * (1f / 32f);\r\n\t\tLine line = new Line(prevPosition - vector3, position + vector3);\r\n\t\tfloat num25 = line.Distance(hitInfo.PointStart);\r\n\t\tfloat num26 = line.Distance(hitInfo.HitPositionWorld);\r\n\t\tif (num25 > ConVar.AntiHack.projectile_trajectory)\r\n\t\t{\r\n\t\t\tstring text21 = value.projectilePrefab.name;\r\n\t\t\tstring text22 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Start position trajectory (\" + text21 + \" on \" + text22 + \" with \" + num25 + \"m > \" + ConVar.AntiHack.projectile_trajectory + \"m)\");\r\n\t\t\tstats.combat.LogInvalid(hitInfo, \"trajectory_start\");\r\n\t\t\tflag9 = false;\r\n\t\t}\r\n\t\tif (num26 > ConVar.AntiHack.projectile_trajectory)\r\n\t\t{\r\n\t\t\tstring text23 = value.projectilePrefab.name;\r\n\t\t\tstring text24 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"End position trajectory (\" + text23 + \" on \" + text24 + \" with \" + num26 + \"m > \" + ConVar.AntiHack.projectile_trajectory + \"m)\");\r\n\t\t\tstats.combat.LogInvalid(hitInfo, \"trajectory_end\");\r\n\t\t\tflag9 = false;\r\n\t\t}\r\n\t\thitInfo.ProjectileVelocity = velocity;\r\n\t\tif (playerProjectileAttack.hitVelocity != Vector3.zero && velocity != Vector3.zero)\r\n\t\t{\r\n\t\t\tfloat num27 = Vector3.Angle(playerProjectileAttack.hitVelocity, velocity);\r\n\t\t\tfloat num28 = playerProjectileAttack.hitVelocity.magnitude / velocity.magnitude;\r\n\t\t\tif (num27 > ConVar.AntiHack.projectile_anglechange)\r\n\t\t\t{\r\n\t\t\t\tstring text25 = value.projectilePrefab.name;\r\n\t\t\t\tstring text26 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Trajectory angle change (\" + text25 + \" on \" + text26 + \" with \" + num27 + \"deg > \" + ConVar.AntiHack.projectile_anglechange + \"deg)\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"angle_change\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t\tif (num28 > ConVar.AntiHack.projectile_velocitychange)\r\n\t\t\t{\r\n\t\t\t\tstring text27 = value.projectilePrefab.name;\r\n\t\t\t\tstring text28 = (flag6 ? hitEntity.ShortPrefabName : \"world\");\r\n\t\t\t\tAntiHack.Log(this, AntiHackType.ProjectileHack, \"Trajectory velocity change (\" + text27 + \" on \" + text28 + \" with \" + num28 + \" > \" + ConVar.AntiHack.projectile_velocitychange + \")\");\r\n\t\t\t\tstats.combat.LogInvalid(hitInfo, \"velocity_change\");\r\n\t\t\t\tflag9 = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (!flag9)\r\n\t{\r\n\t\tAntiHack.AddViolation(this, AntiHackType.ProjectileHack, ConVar.AntiHack.projectile_penalty);\r\n\t\tplayerProjectileAttack.ResetToPool();\r\n\t\tplayerProjectileAttack = null;\r\n\t\treturn;\r\n\t}\r\n\tgoto IL_115c;\r\n}\r\n",
    "OnPlayerBanned (EACServer_OnClientActionRequired_OnPlayerBanned)": "using System;\r\nusing ConVar;\r\nusing Epic.OnlineServices;\r\nusing Epic.OnlineServices.AntiCheatCommon;\r\nusing Epic.OnlineServices.AntiCheatServer;\r\nusing Network;\r\nusing UnityEngine;\r\n\r\nprivate static void OnClientActionRequired(ref OnClientActionRequiredCallbackInfo data)\r\n{\r\n\tusing (TimeWarning.New(\"OnClientActionRequired\", 10))\r\n\t{\r\n\t\tIntPtr clientHandle = data.ClientHandle;\r\n\t\tConnection connection = GetConnection(clientHandle);\r\n\t\tif (connection == null)\r\n\t\t{\r\n\t\t\tDebug.LogError(\"[EAC] Status update for invalid client: \" + clientHandle);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tAntiCheatCommonClientAction clientAction = data.ClientAction;\r\n\t\tif (clientAction != AntiCheatCommonClientAction.RemovePlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUtf8String actionReasonDetailsString = data.ActionReasonDetailsString;\r\n\t\tDebug.Log($\"[EAC] Kicking {connection.userid} / {connection.username} ({actionReasonDetailsString})\");\r\n\t\tconnection.authStatus = \"eac\";\r\n\t\tNetwork.Net.sv.Kick(connection, \"EAC: \" + actionReasonDetailsString);\r\n\t\tif (data.ActionReasonCode == AntiCheatCommonClientActionReason.PermanentBanned || data.ActionReasonCode == AntiCheatCommonClientActionReason.TemporaryBanned)\r\n\t\t{\r\n\t\t\tconnection.authStatus = \"eacbanned\";\r\n\t\t\tConsoleNetwork.BroadcastToAllClients(\"chat.add\", 2, 0, \"<color=#fff>SERVER</color> Kicking \" + connection.username + \" (banned by anticheat)\");\r\n\t\t\tif (data.ActionReasonCode == AntiCheatCommonClientActionReason.PermanentBanned)\r\n\t\t\t{\r\n\t\t\t\tEntity.DeleteBy(connection.userid);\r\n\t\t\t}\r\n\t\t}\r\n\t\tUnregisterClientOptions unregisterClientOptions = default(UnregisterClientOptions);\r\n\t\tunregisterClientOptions.ClientHandle = clientHandle;\r\n\t\tUnregisterClientOptions options = unregisterClientOptions;\r\n\t\tInterface.UnregisterClient(ref options);\r\n\t\tclient2connection.Remove(clientHandle);\r\n\t\tconnection2client.Remove(connection);\r\n\t\tconnection2status.Remove(connection);\r\n\t}\r\n}\r\n",
    "OnPlayerKicked (EACServer_OnClientActionRequired_OnPlayerKicked)": "using System;\r\nusing ConVar;\r\nusing Epic.OnlineServices;\r\nusing Epic.OnlineServices.AntiCheatCommon;\r\nusing Epic.OnlineServices.AntiCheatServer;\r\nusing Network;\r\nusing UnityEngine;\r\n\r\nprivate static void OnClientActionRequired(ref OnClientActionRequiredCallbackInfo data)\r\n{\r\n\tusing (TimeWarning.New(\"OnClientActionRequired\", 10))\r\n\t{\r\n\t\tIntPtr clientHandle = data.ClientHandle;\r\n\t\tConnection connection = GetConnection(clientHandle);\r\n\t\tif (connection == null)\r\n\t\t{\r\n\t\t\tDebug.LogError(\"[EAC] Status update for invalid client: \" + clientHandle);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tAntiCheatCommonClientAction clientAction = data.ClientAction;\r\n\t\tif (clientAction != AntiCheatCommonClientAction.RemovePlayer)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tUtf8String actionReasonDetailsString = data.ActionReasonDetailsString;\r\n\t\tDebug.Log($\"[EAC] Kicking {connection.userid} / {connection.username} ({actionReasonDetailsString})\");\r\n\t\tconnection.authStatus = \"eac\";\r\n\t\tNetwork.Net.sv.Kick(connection, \"EAC: \" + actionReasonDetailsString);\r\n\t\tif (data.ActionReasonCode == AntiCheatCommonClientActionReason.PermanentBanned || data.ActionReasonCode == AntiCheatCommonClientActionReason.TemporaryBanned)\r\n\t\t{\r\n\t\t\tconnection.authStatus = \"eacbanned\";\r\n\t\t\tConsoleNetwork.BroadcastToAllClients(\"chat.add\", 2, 0, \"<color=#fff>SERVER</color> Kicking \" + connection.username + \" (banned by anticheat)\");\r\n\t\t\tif (data.ActionReasonCode == AntiCheatCommonClientActionReason.PermanentBanned)\r\n\t\t\t{\r\n\t\t\t\tEntity.DeleteBy(connection.userid);\r\n\t\t\t}\r\n\t\t}\r\n\t\tUnregisterClientOptions unregisterClientOptions = default(UnregisterClientOptions);\r\n\t\tunregisterClientOptions.ClientHandle = clientHandle;\r\n\t\tUnregisterClientOptions options = unregisterClientOptions;\r\n\t\tInterface.UnregisterClient(ref options);\r\n\t\tclient2connection.Remove(clientHandle);\r\n\t\tconnection2client.Remove(connection);\r\n\t\tconnection2status.Remove(connection);\r\n\t}\r\n}\r\n",
    "OnPlayerDeath (BasePlayer_Die)": "using UnityEngine;\r\n\r\npublic override void Die(HitInfo info = null)\r\n{\r\n\tusing (TimeWarning.New(\"Player.Die\"))\r\n\t{\r\n\t\tif (!IsDead())\r\n\t\t{\r\n\t\t\tif (Belt != null && ShouldDropActiveItem())\r\n\t\t\t{\r\n\t\t\t\tVector3 vector = new Vector3(Random.Range(-2f, 2f), 0.2f, Random.Range(-2f, 2f));\r\n\t\t\t\tBelt.DropActive(GetDropPosition(), GetInheritedDropVelocity() + vector.normalized * 3f);\r\n\t\t\t}\r\n\t\t\tif (!WoundInsteadOfDying(info))\r\n\t\t\t{\r\n\t\t\t\tSleepingBag.OnPlayerDeath(this);\r\n\t\t\t\tbase.Die(info);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnPlayerDropActiveItem (PlayerBelt_DropActive)": "using UnityEngine;\r\n\r\npublic void DropActive(Vector3 position, Vector3 velocity)\r\n{\r\n\tItem activeItem = player.GetActiveItem();\r\n\tif (activeItem == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tusing (TimeWarning.New(\"PlayerBelt.DropActive\"))\r\n\t{\r\n\t\tactiveItem.Drop(position, velocity);\r\n\t\tplayer.svActiveItemID = 0u;\r\n\t\tplayer.SendNetworkUpdate();\r\n\t}\r\n}\r\n",
    "OnPlayerInput (BasePlayer_OnReceiveTick_OnPlayerInput)": "private void OnReceiveTick(PlayerTick msg, bool wasPlayerStalled)\r\n{\r\n\tif (msg.inputState != null)\r\n\t{\r\n\t\tserverInput.Flip(msg.inputState);\r\n\t}\r\n\tif (serverInput.current.buttons != serverInput.previous.buttons)\r\n\t{\r\n\t\tResetInputIdleTime();\r\n\t}\r\n\tif (IsReceivingSnapshot)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (IsSpectating())\r\n\t{\r\n\t\tusing (TimeWarning.New(\"Tick_Spectator\"))\r\n\t\t{\r\n\t\t\tTick_Spectator();\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (IsDead())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (IsSleeping())\r\n\t{\r\n\t\tif (serverInput.WasJustPressed(BUTTON.FIRE_PRIMARY) || serverInput.WasJustPressed(BUTTON.FIRE_SECONDARY) || serverInput.WasJustPressed(BUTTON.JUMP) || serverInput.WasJustPressed(BUTTON.DUCK))\r\n\t\t{\r\n\t\t\tEndSleeping();\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tUpdateActiveItem(0u);\r\n\t\treturn;\r\n\t}\r\n\tUpdateActiveItem(msg.activeItem);\r\n\tUpdateModelStateFromTick(msg);\r\n\tif (!IsIncapacitated())\r\n\t{\r\n\t\tif (isMounted)\r\n\t\t{\r\n\t\t\tGetMounted().PlayerServerInput(serverInput, this);\r\n\t\t}\r\n\t\tUpdatePositionFromTick(msg, wasPlayerStalled);\r\n\t\tUpdateRotationFromTick(msg);\r\n\t}\r\n}\r\n",
    "OnPlayerTick (BasePlayer_OnReceiveTick_OnPlayerTick)": "private void OnReceiveTick(PlayerTick msg, bool wasPlayerStalled)\r\n{\r\n\tif (msg.inputState != null)\r\n\t{\r\n\t\tserverInput.Flip(msg.inputState);\r\n\t}\r\n\tif (serverInput.current.buttons != serverInput.previous.buttons)\r\n\t{\r\n\t\tResetInputIdleTime();\r\n\t}\r\n\tif (IsReceivingSnapshot)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (IsSpectating())\r\n\t{\r\n\t\tusing (TimeWarning.New(\"Tick_Spectator\"))\r\n\t\t{\r\n\t\t\tTick_Spectator();\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tif (IsDead())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (IsSleeping())\r\n\t{\r\n\t\tif (serverInput.WasJustPressed(BUTTON.FIRE_PRIMARY) || serverInput.WasJustPressed(BUTTON.FIRE_SECONDARY) || serverInput.WasJustPressed(BUTTON.JUMP) || serverInput.WasJustPressed(BUTTON.DUCK))\r\n\t\t{\r\n\t\t\tEndSleeping();\r\n\t\t\tSendNetworkUpdateImmediate();\r\n\t\t}\r\n\t\tUpdateActiveItem(0u);\r\n\t\treturn;\r\n\t}\r\n\tUpdateActiveItem(msg.activeItem);\r\n\tUpdateModelStateFromTick(msg);\r\n\tif (!IsIncapacitated())\r\n\t{\r\n\t\tif (isMounted)\r\n\t\t{\r\n\t\t\tGetMounted().PlayerServerInput(serverInput, this);\r\n\t\t}\r\n\t\tUpdatePositionFromTick(msg, wasPlayerStalled);\r\n\t\tUpdateRotationFromTick(msg);\r\n\t}\r\n}\r\n",
    "OnPlayerLootEnd (PlayerLoot_Clear)": "using UnityEngine;\r\n\r\npublic void Clear()\r\n{\r\n\tif (!IsLooting())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tMarkDirty();\r\n\tif ((bool)entitySource)\r\n\t{\r\n\t\tentitySource.SendMessage(\"PlayerStoppedLooting\", base.baseEntity, SendMessageOptions.DontRequireReceiver);\r\n\t}\r\n\tforeach (ItemContainer container in containers)\r\n\t{\r\n\t\tif (container != null)\r\n\t\t{\r\n\t\t\tcontainer.onDirty -= MarkDirty;\r\n\t\t}\r\n\t}\r\n\tcontainers.Clear();\r\n\tentitySource = null;\r\n\titemSource = null;\r\n}\r\n",
    "OnPlayerRecover (BasePlayer_RecoverFromWounded_OnPlayerRecover)": "using UnityEngine;\r\n\r\nprivate void RecoverFromWounded()\r\n{\r\n\tif (IsCrawling())\r\n\t{\r\n\t\tbase.health = Random.Range(2f, 6f) + healingWhileCrawling;\r\n\t}\r\n\thealingWhileCrawling = 0f;\r\n\tSetPlayerFlag(PlayerFlags.Wounded, b: false);\r\n\tSetPlayerFlag(PlayerFlags.Incapacitated, b: false);\r\n\tif ((bool)BaseGameMode.GetActiveGameMode(base.isServer))\r\n\t{\r\n\t\tBaseGameMode.GetActiveGameMode(base.isServer).OnPlayerRevived(null, this);\r\n\t}\r\n}\r\n",
    "OnPlayerRecovered (BasePlayer_RecoverFromWounded_OnPlayerRecovered)": "using UnityEngine;\r\n\r\nprivate void RecoverFromWounded()\r\n{\r\n\tif (IsCrawling())\r\n\t{\r\n\t\tbase.health = Random.Range(2f, 6f) + healingWhileCrawling;\r\n\t}\r\n\thealingWhileCrawling = 0f;\r\n\tSetPlayerFlag(PlayerFlags.Wounded, b: false);\r\n\tSetPlayerFlag(PlayerFlags.Incapacitated, b: false);\r\n\tif ((bool)BaseGameMode.GetActiveGameMode(base.isServer))\r\n\t{\r\n\t\tBaseGameMode.GetActiveGameMode(base.isServer).OnPlayerRevived(null, this);\r\n\t}\r\n}\r\n",
    "OnPlayerRespawn (BasePlayer_Respawn)": "public void Respawn()\r\n{\r\n\tSpawnPoint spawnPoint = ServerMgr.FindSpawnPoint(this);\r\n\tRespawnAt(spawnPoint.pos, spawnPoint.rot);\r\n}\r\n",
    "OnPlayerRespawn (SleepingBag_SpawnPlayer)": "using System.Linq;\r\nusing UnityEngine;\r\n\r\npublic static bool SpawnPlayer(BasePlayer player, uint sleepingBag)\r\n{\r\n\tSleepingBag[] array = FindForPlayer(player.userID, ignoreTimers: true);\r\n\tSleepingBag sleepingBag2 = array.FirstOrDefault((SleepingBag x) => x.ValidForPlayer(player.userID, ignoreTimers: false) && x.net.ID == sleepingBag && x.unlockTime < Time.realtimeSinceStartup);\r\n\tif (sleepingBag2 == null)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tif (sleepingBag2.IsOccupied())\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tsleepingBag2.GetSpawnPos(out var pos, out var rot);\r\n\tplayer.RespawnAt(pos, rot);\r\n\tsleepingBag2.PostPlayerSpawn(player);\r\n\tSleepingBag[] array2 = array;\r\n\tfor (int i = 0; i < array2.Length; i++)\r\n\t{\r\n\t\tSetBagTimer(array2[i], pos, SleepingBagResetReason.Respawned);\r\n\t}\r\n\treturn true;\r\n}\r\n",
    "OnPlayerRespawned (BasePlayer_Respawned)": "using UnityEngine;\r\n\r\npublic void RespawnAt(Vector3 position, Quaternion rotation)\r\n{\r\n\tBaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);\r\n\tif (!activeGameMode || activeGameMode.CanPlayerRespawn(this))\r\n\t{\r\n\t\tSetPlayerFlag(PlayerFlags.Wounded, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.Unused2, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.Unused1, b: false);\r\n\t\tSetPlayerFlag(PlayerFlags.ReceivingSnapshot, b: true);\r\n\t\tSetPlayerFlag(PlayerFlags.DisplaySash, b: false);\r\n\t\tServerPerformance.spawns++;\r\n\t\tSetParent(null, worldPositionStays: true);\r\n\t\tbase.transform.SetPositionAndRotation(position, rotation);\r\n\t\ttickInterpolator.Reset(position);\r\n\t\ttickHistory.Reset(position);\r\n\t\teyeHistory.Clear();\r\n\t\testimatedVelocity = Vector3.zero;\r\n\t\testimatedSpeed = 0f;\r\n\t\testimatedSpeed2D = 0f;\r\n\t\tlastTickTime = 0f;\r\n\t\tStopWounded();\r\n\t\tResetWoundingVars();\r\n\t\tStopSpectating();\r\n\t\tUpdateNetworkGroup();\r\n\t\tEnablePlayerCollider();\r\n\t\tRemovePlayerRigidbody();\r\n\t\tStartSleeping();\r\n\t\tLifeStoryStart();\r\n\t\tmetabolism.Reset();\r\n\t\tif (modifiers != null)\r\n\t\t{\r\n\t\t\tmodifiers.RemoveAll();\r\n\t\t}\r\n\t\tInitializeHealth(StartHealth(), StartMaxHealth());\r\n\t\tinventory.GiveDefaultItems();\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tClientRPCPlayer(null, this, \"StartLoading\");\r\n\t\tif ((bool)activeGameMode)\r\n\t\t{\r\n\t\t\tBaseGameMode.GetActiveGameMode(serverside: true).OnPlayerRespawn(this);\r\n\t\t}\r\n\t\tif (net != null)\r\n\t\t{\r\n\t\t\tEACServer.OnStartLoading(net.connection);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnPlayerRevive (MedicalTool_GiveEffectsTo)": "using UnityEngine;\r\n\r\nprivate void GiveEffectsTo(BasePlayer player)\r\n{\r\n\tif (!player)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tItemModConsumable component = GetOwnerItemDefinition().GetComponent<ItemModConsumable>();\r\n\tif (!component)\r\n\t{\r\n\t\tDebug.LogWarning(\"No consumable for medicaltool :\" + base.name);\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (player != ownerPlayer && player.IsWounded() && canRevive)\r\n\t{\r\n\t\tplayer.StopWounded(ownerPlayer);\r\n\t}\r\n\tforeach (ItemModConsumable.ConsumableEffect effect in component.effects)\r\n\t{\r\n\t\tif (effect.type == MetabolismAttribute.Type.Health)\r\n\t\t{\r\n\t\t\tplayer.health += effect.amount;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tplayer.metabolism.ApplyChange(effect.type, effect.amount, effect.time);\r\n\t\t}\r\n\t}\r\n\tif (player is BasePet)\r\n\t{\r\n\t\tplayer.SendNetworkUpdateImmediate();\r\n\t}\r\n}\r\n",
    "OnHealingItemUse (MedicalTool_GiveEffectsTo_OnHealingItemUse)": "using UnityEngine;\r\n\r\nprivate void GiveEffectsTo(BasePlayer player)\r\n{\r\n\tif (!player)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tItemModConsumable component = GetOwnerItemDefinition().GetComponent<ItemModConsumable>();\r\n\tif (!component)\r\n\t{\r\n\t\tDebug.LogWarning(\"No consumable for medicaltool :\" + base.name);\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (player != ownerPlayer && player.IsWounded() && canRevive)\r\n\t{\r\n\t\tplayer.StopWounded(ownerPlayer);\r\n\t}\r\n\tforeach (ItemModConsumable.ConsumableEffect effect in component.effects)\r\n\t{\r\n\t\tif (effect.type == MetabolismAttribute.Type.Health)\r\n\t\t{\r\n\t\t\tplayer.health += effect.amount;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tplayer.metabolism.ApplyChange(effect.type, effect.amount, effect.time);\r\n\t\t}\r\n\t}\r\n\tif (player is BasePet)\r\n\t{\r\n\t\tplayer.SendNetworkUpdateImmediate();\r\n\t}\r\n}\r\n",
    "OnPlayerSleep (BasePlayer_StartSleeping)": "using UnityEngine;\r\n\r\npublic virtual void StartSleeping()\r\n{\r\n\tif (!IsSleeping())\r\n\t{\r\n\t\tif (InSafeZone() && !IsInvoking(ScheduledDeath))\r\n\t\t{\r\n\t\t\tInvoke(ScheduledDeath, NPCAutoTurret.sleeperhostiledelay);\r\n\t\t}\r\n\t\tBaseMountable baseMountable = GetMounted();\r\n\t\tif (baseMountable != null && !baseMountable.allowSleeperMounting)\r\n\t\t{\r\n\t\t\tEnsureDismounted();\r\n\t\t}\r\n\t\tSetPlayerFlag(PlayerFlags.Sleeping, b: true);\r\n\t\tsleepStartTime = Time.time;\r\n\t\tsleepingPlayerList.Add(this);\r\n\t\tbots.Remove(this);\r\n\t\tCancelInvoke(InventoryUpdate);\r\n\t\tCancelInvoke(TeamUpdate);\r\n\t\tinventory.loot.Clear();\r\n\t\tinventory.crafting.CancelAll(returnItems: true);\r\n\t\tinventory.containerMain.OnChanged();\r\n\t\tinventory.containerBelt.OnChanged();\r\n\t\tinventory.containerWear.OnChanged();\r\n\t\tTurnOffAllLights();\r\n\t\tEnablePlayerCollider();\r\n\t\tRemovePlayerRigidbody();\r\n\t\tSetServerFall(wantsOn: true);\r\n\t}\r\n}\r\n",
    "OnPlayerSleepEnded (BasePlayer_EndSleeping)": "using Epic.OnlineServices.AntiCheatCommon;\r\nusing UnityEngine;\r\n\r\npublic virtual void EndSleeping()\r\n{\r\n\tif (!IsSleeping())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tSetPlayerFlag(PlayerFlags.Sleeping, b: false);\r\n\tsleepStartTime = -1f;\r\n\tsleepingPlayerList.Remove(this);\r\n\tif (userID < 10000000 && !bots.Contains(this))\r\n\t{\r\n\t\tbots.Add(this);\r\n\t}\r\n\tCancelInvoke(ScheduledDeath);\r\n\tInvokeRepeating(InventoryUpdate, 1f, 0.1f * Random.Range(0.99f, 1.01f));\r\n\tif (RelationshipManager.TeamsEnabled())\r\n\t{\r\n\t\tInvokeRandomized(TeamUpdate, 1f, 4f, 1f);\r\n\t}\r\n\tEnablePlayerCollider();\r\n\tAddPlayerRigidbody();\r\n\tSetServerFall(wantsOn: false);\r\n\tif (HasParent())\r\n\t{\r\n\t\tSetParent(null, worldPositionStays: true);\r\n\t\tForceUpdateTriggers();\r\n\t}\r\n\tinventory.containerMain.OnChanged();\r\n\tinventory.containerBelt.OnChanged();\r\n\tinventory.containerWear.OnChanged();\r\n\tif (!EACServer.CanSendAnalytics || net.connection == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tusing (TimeWarning.New(\"EAC.LogPlayerSpawn\"))\r\n\t{\r\n\t\tLogPlayerSpawnOptions options = default(LogPlayerSpawnOptions);\r\n\t\toptions.SpawnedPlayerHandle = EACServer.GetClient(net.connection);\r\n\t\tEACServer.Interface.LogPlayerSpawn(ref options);\r\n\t}\r\n}\r\n",
    "CanTakeCutting (GrowableEntity_TakeClones)": "using UnityEngine;\r\n\r\nprivate void TakeClones(BasePlayer player)\r\n{\r\n\tif (player == null || !CanClone())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tint num = Properties.BaseCloneCount + Genes.GetGeneTypeCount(GrowableGenetics.GeneType.Yield) / 2;\r\n\tif (num > 0)\r\n\t{\r\n\t\tItem item = ItemManager.Create(Properties.CloneItem, num, 0uL);\r\n\t\tGrowableGeneEncoding.EncodeGenesToItem(this, item);\r\n\t\tplayer.GiveItem(item, GiveItemReason.PickedUp);\r\n\t\tif (Properties.pickEffect.isValid)\r\n\t\t{\r\n\t\t\tEffect.server.Run(Properties.pickEffect.resourcePath, base.transform.position, Vector3.up);\r\n\t\t}\r\n\t\tDie();\r\n\t}\r\n}\r\n",
    "OnCollectiblePickup (CollectibleEntity_DoPickup)": "using UnityEngine;\r\n\r\npublic void DoPickup(BasePlayer reciever)\r\n{\r\n\tif (itemList == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tItemAmount[] array = itemList;\r\n\tforeach (ItemAmount itemAmount in array)\r\n\t{\r\n\t\tItem item = ItemManager.Create(itemAmount.itemDef, (int)itemAmount.amount, 0uL);\r\n\t\tif (item != null)\r\n\t\t{\r\n\t\t\tif ((bool)reciever)\r\n\t\t\t{\r\n\t\t\t\treciever.GiveItem(item, GiveItemReason.ResourceHarvested);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\titem.Drop(base.transform.position + Vector3.up * 0.5f, Vector3.up);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\titemList = null;\r\n\tif (pickupEffect.isValid)\r\n\t{\r\n\t\tEffect.server.Run(pickupEffect.resourcePath, base.transform.position, base.transform.up);\r\n\t}\r\n\tRandomItemDispenser randomItemDispenser = PrefabAttribute.server.Find<RandomItemDispenser>(prefabID);\r\n\tif (randomItemDispenser != null)\r\n\t{\r\n\t\trandomItemDispenser.DistributeItems(reciever, base.transform.position);\r\n\t}\r\n\tKill();\r\n}\r\n",
    "OnDispenserBonus (ResourceDispenser_AssignFinishBonus)": "using UnityEngine;\r\n\r\npublic void AssignFinishBonus(BasePlayer player, float fraction)\r\n{\r\n\tSendMessage(\"FinishBonusAssigned\", SendMessageOptions.DontRequireReceiver);\r\n\tif (fraction <= 0f || finishBonus == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tforeach (ItemAmount finishBonu in finishBonus)\r\n\t{\r\n\t\tint num = Mathf.CeilToInt((float)(int)finishBonu.amount * Mathf.Clamp01(fraction));\r\n\t\tint num2 = CalculateGatherBonus(player, finishBonu, num);\r\n\t\tItem item = ItemManager.Create(finishBonu.itemDef, num + num2, 0uL);\r\n\t\tif (item != null)\r\n\t\t{\r\n\t\t\tplayer.GiveItem(item, BaseEntity.GiveItemReason.ResourceHarvested);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnDispenserGather (ResourceDispenser_GiveResourceFromItem)": "using UnityEngine;\r\n\r\nprivate void GiveResourceFromItem(BaseEntity entity, ItemAmount itemAmt, float gatherDamage, float destroyFraction, AttackEntity attackWeapon)\r\n{\r\n\tif (itemAmt.amount == 0f)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tfloat num = Mathf.Min(gatherDamage, base.baseEntity.Health()) / base.baseEntity.MaxHealth();\r\n\tfloat num2 = itemAmt.startAmount / startingItemCounts;\r\n\tfloat f = Mathf.Clamp(itemAmt.startAmount * num / num2, 0f, itemAmt.amount);\r\n\tf = Mathf.Round(f);\r\n\tfloat num3 = f * destroyFraction * 2f;\r\n\tif (itemAmt.amount <= f + num3)\r\n\t{\r\n\t\tfloat num4 = (f + num3) / itemAmt.amount;\r\n\t\tf /= num4;\r\n\t\tnum3 /= num4;\r\n\t}\r\n\titemAmt.amount -= Mathf.Floor(f);\r\n\titemAmt.amount -= Mathf.Floor(num3);\r\n\tif (f < 1f)\r\n\t{\r\n\t\tf = ((Random.Range(0f, 1f) <= f) ? 1f : 0f);\r\n\t\titemAmt.amount = 0f;\r\n\t}\r\n\tif (itemAmt.amount < 0f)\r\n\t{\r\n\t\titemAmt.amount = 0f;\r\n\t}\r\n\tif (f >= 1f)\r\n\t{\r\n\t\tint num5 = CalculateGatherBonus(entity, itemAmt, f);\r\n\t\tint iAmount = Mathf.FloorToInt(f) + num5;\r\n\t\tItem item = ItemManager.CreateByItemID(itemAmt.itemid, iAmount, 0uL);\r\n\t\tif (item != null)\r\n\t\t{\r\n\t\t\tOverrideOwnership(item, attackWeapon);\r\n\t\t\tentity.GiveItem(item, BaseEntity.GiveItemReason.ResourceHarvested);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnGrowableGathered (GrowableEntity_GiveFruit)": "private void GiveFruit(BasePlayer player, int amount)\r\n{\r\n\tif (amount <= 0)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tbool flag = Properties.pickupItem.condition.enabled;\r\n\tif (flag)\r\n\t{\r\n\t\tfor (int i = 0; i < amount; i++)\r\n\t\t{\r\n\t\t\tGiveFruit(player, 1, flag);\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tGiveFruit(player, amount, flag);\r\n\t}\r\n}\r\n",
    "OnQuarryToggled (EngineSwitch_StartEngine)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\npublic void StartEngine(RPCMessage msg)\r\n{\r\n\tMiningQuarry miningQuarry = GetParentEntity() as MiningQuarry;\r\n\tif ((bool)miningQuarry)\r\n\t{\r\n\t\tminingQuarry.EngineSwitch(isOn: true);\r\n\t}\r\n}\r\n",
    "OnQuarryToggled (EngineSwitch_StopEngine)": "[RPC_Server]\r\n[RPC_Server.MaxDistance(3f)]\r\npublic void StopEngine(RPCMessage msg)\r\n{\r\n\tMiningQuarry miningQuarry = GetParentEntity() as MiningQuarry;\r\n\tif ((bool)miningQuarry)\r\n\t{\r\n\t\tminingQuarry.EngineSwitch(isOn: false);\r\n\t}\r\n}\r\n",
    "OnMessagePlayer (BasePlayer_ChatMessage)": "public void ChatMessage(string msg)\r\n{\r\n\tif (base.isServer)\r\n\t{\r\n\t\tSendConsoleCommand(\"chat.add\", 2, 0, msg);\r\n\t}\r\n}\r\n",
    "OnNewSave (SaveRestore_Load)": "#define UNITY_ASSERTIONS\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Facepunch;\r\nusing Facepunch.Math;\r\nusing Network;\r\nusing ProtoBuf;\r\nusing Rust;\r\nusing UnityEngine;\r\nusing UnityEngine.Assertions;\r\n\r\npublic static bool Load(string strFilename = \"\", bool allowOutOfDateSaves = false)\r\n{\r\n\tSaveCreatedTime = DateTime.UtcNow;\r\n\ttry\r\n\t{\r\n\t\tif (strFilename == \"\")\r\n\t\t{\r\n\t\t\tstrFilename = World.SaveFolderName + \"/\" + World.SaveFileName;\r\n\t\t}\r\n\t\tif (!File.Exists(strFilename))\r\n\t\t{\r\n\t\t\tif (!File.Exists(\"TestSaves/\" + strFilename))\r\n\t\t\t{\r\n\t\t\t\tUnityEngine.Debug.LogWarning(\"Couldn't load \" + strFilename + \" - file doesn't exist\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tstrFilename = \"TestSaves/\" + strFilename;\r\n\t\t}\r\n\t\tDictionary<BaseEntity, Entity> dictionary = new Dictionary<BaseEntity, Entity>();\r\n\t\tusing (FileStream fileStream = File.OpenRead(strFilename))\r\n\t\t{\r\n\t\t\tusing BinaryReader binaryReader = new BinaryReader(fileStream);\r\n\t\t\tSaveCreatedTime = File.GetCreationTime(strFilename);\r\n\t\t\tif (binaryReader.ReadSByte() != 83 || binaryReader.ReadSByte() != 65 || binaryReader.ReadSByte() != 86 || binaryReader.ReadSByte() != 82)\r\n\t\t\t{\r\n\t\t\t\tUnityEngine.Debug.LogWarning(\"Invalid save (missing header)\");\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif (binaryReader.PeekChar() == 68)\r\n\t\t\t{\r\n\t\t\t\tbinaryReader.ReadChar();\r\n\t\t\t\tSaveCreatedTime = Epoch.ToDateTime(binaryReader.ReadInt32());\r\n\t\t\t}\r\n\t\t\tif (binaryReader.ReadUInt32() != 229)\r\n\t\t\t{\r\n\t\t\t\tif (allowOutOfDateSaves)\r\n\t\t\t\t{\r\n\t\t\t\t\tUnityEngine.Debug.LogWarning(\"This save is from an older (possibly incompatible) version!\");\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tUnityEngine.Debug.LogWarning(\"This save is from an older version. It might not load properly.\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tClearMapEntities();\r\n\t\t\tAssert.IsTrue(BaseEntity.saveList.Count == 0, \"BaseEntity.saveList isn't empty!\");\r\n\t\t\tNet.sv.Reset();\r\n\t\t\tRust.Application.isLoadingSave = true;\r\n\t\t\tHashSet<uint> hashSet = new HashSet<uint>();\r\n\t\t\twhile (fileStream.Position < fileStream.Length)\r\n\t\t\t{\r\n\t\t\t\tRCon.Update();\r\n\t\t\t\tuint num = binaryReader.ReadUInt32();\r\n\t\t\t\tlong position = fileStream.Position;\r\n\t\t\t\tEntity entData = null;\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tentData = Entity.DeserializeLength(fileStream, (int)num);\r\n\t\t\t\t}\r\n\t\t\t\tcatch (Exception exception)\r\n\t\t\t\t{\r\n\t\t\t\t\tUnityEngine.Debug.LogWarning(\"Skipping entity since it could not be deserialized - stream position: \" + position + \" size: \" + num);\r\n\t\t\t\t\tUnityEngine.Debug.LogException(exception);\r\n\t\t\t\t\tfileStream.Position = position + num;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (entData.basePlayer != null && dictionary.Any((KeyValuePair<BaseEntity, Entity> x) => x.Value.basePlayer != null && x.Value.basePlayer.userid == entData.basePlayer.userid))\r\n\t\t\t\t{\r\n\t\t\t\t\tUnityEngine.Debug.LogWarning(\"Skipping entity \" + entData.baseNetworkable.uid + \" - it's a player \" + entData.basePlayer.userid + \" who is in the save multiple times\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (entData.baseNetworkable.uid != 0 && hashSet.Contains(entData.baseNetworkable.uid))\r\n\t\t\t\t{\r\n\t\t\t\t\tUnityEngine.Debug.LogWarning(\"Skipping entity \" + entData.baseNetworkable.uid + \" \" + StringPool.Get(entData.baseNetworkable.prefabID) + \" - uid is used multiple times\");\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (entData.baseNetworkable.uid != 0)\r\n\t\t\t\t{\r\n\t\t\t\t\thashSet.Add(entData.baseNetworkable.uid);\r\n\t\t\t\t}\r\n\t\t\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(StringPool.Get(entData.baseNetworkable.prefabID), entData.baseEntity.pos, Quaternion.Euler(entData.baseEntity.rot));\r\n\t\t\t\tif ((bool)baseEntity)\r\n\t\t\t\t{\r\n\t\t\t\t\tbaseEntity.InitLoad(entData.baseNetworkable.uid);\r\n\t\t\t\t\tdictionary.Add(baseEntity, entData);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDebugEx.Log(\"Spawning \" + dictionary.Count + \" entities\");\r\n\t\tBaseNetworkable.LoadInfo info = default(BaseNetworkable.LoadInfo);\r\n\t\tinfo.fromDisk = true;\r\n\t\tStopwatch stopwatch = Stopwatch.StartNew();\r\n\t\tint num2 = 0;\r\n\t\tforeach (KeyValuePair<BaseEntity, Entity> item in dictionary)\r\n\t\t{\r\n\t\t\tBaseEntity key = item.Key;\r\n\t\t\tif (key == null)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tRCon.Update();\r\n\t\t\tinfo.msg = item.Value;\r\n\t\t\tkey.Spawn();\r\n\t\t\tkey.Load(info);\r\n\t\t\tif (key.IsValid())\r\n\t\t\t{\r\n\t\t\t\tnum2++;\r\n\t\t\t\tif (stopwatch.Elapsed.TotalMilliseconds > 2000.0)\r\n\t\t\t\t{\r\n\t\t\t\t\tstopwatch.Reset();\r\n\t\t\t\t\tstopwatch.Start();\r\n\t\t\t\t\tDebugEx.Log(\"\\t\" + num2 + \" / \" + dictionary.Count);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tforeach (KeyValuePair<BaseEntity, Entity> item2 in dictionary)\r\n\t\t{\r\n\t\t\tBaseEntity key2 = item2.Key;\r\n\t\t\tif (!(key2 == null))\r\n\t\t\t{\r\n\t\t\t\tRCon.Update();\r\n\t\t\t\tif (key2.IsValid())\r\n\t\t\t\t{\r\n\t\t\t\t\tkey2.PostServerLoad();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tDebugEx.Log(\"\\tdone.\");\r\n\t\tif ((bool)SingletonComponent<SpawnHandler>.Instance)\r\n\t\t{\r\n\t\t\tDebugEx.Log(\"Enforcing SpawnPopulation Limits\");\r\n\t\t\tSingletonComponent<SpawnHandler>.Instance.EnforceLimits();\r\n\t\t\tDebugEx.Log(\"\\tdone.\");\r\n\t\t}\r\n\t\tRust.Application.isLoadingSave = false;\r\n\t\treturn true;\r\n\t}\r\n\tcatch (Exception exception2)\r\n\t{\r\n\t\tUnityEngine.Debug.LogWarning(\"Error loading save (\" + strFilename + \")\");\r\n\t\tUnityEngine.Debug.LogException(exception2);\r\n\t\treturn false;\r\n\t}\r\n}\r\n",
    "OnServerMessage (ConVar_Chat_Broadcast)": "using Facepunch.Math;\r\nusing UnityEngine;\r\n\r\npublic static void Broadcast(string message, string username = \"SERVER\", string color = \"#eee\", ulong userid = 0uL)\r\n{\r\n\tstring text = username.EscapeRichText();\r\n\tConsoleNetwork.BroadcastToAllClients(\"chat.add\", 2, 0, \"<color=\" + color + \">\" + text + \"</color> \" + message);\r\n\tChatEntry ce = default(ChatEntry);\r\n\tce.Channel = ChatChannel.Server;\r\n\tce.Message = message;\r\n\tce.UserId = userid.ToString();\r\n\tce.Username = username;\r\n\tce.Color = color;\r\n\tce.Time = Epoch.Current;\r\n\tRecord(ce);\r\n}\r\n",
    "OnShopAcceptClick (ShopFront_AcceptClicked)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void AcceptClicked(RPCMessage msg)\r\n{\r\n\tif (IsTradingPlayer(msg.player) && !(vendorPlayer == null) && !(customerPlayer == null))\r\n\t{\r\n\t\tif (IsPlayerVendor(msg.player))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved1, b: true);\r\n\t\t\tvendorInventory.SetLocked(isLocked: true);\r\n\t\t}\r\n\t\telse if (IsPlayerCustomer(msg.player))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved2, b: true);\r\n\t\t\tcustomerInventory.SetLocked(isLocked: true);\r\n\t\t}\r\n\t\tif (HasFlag(Flags.Reserved1) && HasFlag(Flags.Reserved2))\r\n\t\t{\r\n\t\t\tSetFlag(Flags.Reserved3, b: true);\r\n\t\t\tInvoke(CompleteTrade, 2f);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnShopCancelClick (ShopFront_CancelClicked)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\npublic void CancelClicked(RPCMessage msg)\r\n{\r\n\tif (IsTradingPlayer(msg.player))\r\n\t{\r\n\t\t_ = (bool)vendorPlayer;\r\n\t\t_ = (bool)customerPlayer;\r\n\t\tResetTrade();\r\n\t}\r\n}\r\n",
    "OnHammerHit (Hammer_DoAttackShared)": "public override void DoAttackShared(HitInfo info)\r\n{\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tBaseCombatEntity baseCombatEntity = info.HitEntity as BaseCombatEntity;\r\n\tif (baseCombatEntity != null && ownerPlayer != null && base.isServer)\r\n\t{\r\n\t\tusing (TimeWarning.New(\"DoRepair\", 50))\r\n\t\t{\r\n\t\t\tbaseCombatEntity.DoRepair(ownerPlayer);\r\n\t\t}\r\n\t}\r\n\tinfo.DoDecals = false;\r\n\tif (base.isServer)\r\n\t{\r\n\t\tEffect.server.ImpactEffect(info);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tEffect.client.ImpactEffect(info);\r\n\t}\r\n}\r\n",
    "OnStructureRepair (BaseCombatEntity_DoRepair)": "using System.Collections.Generic;\r\nusing System.Linq;\r\nusing UnityEngine;\r\n\r\npublic virtual void DoRepair(BasePlayer player)\r\n{\r\n\tif (!repair.enabled)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tfloat num = 30f;\r\n\tif (SecondsSinceAttacked <= num)\r\n\t{\r\n\t\tOnRepairFailed(player, $\"Unable to repair: Recently damaged. Repairable in: {num - SecondsSinceAttacked:N0}s.\");\r\n\t\treturn;\r\n\t}\r\n\tfloat num2 = MaxHealth() - Health();\r\n\tfloat num3 = num2 / MaxHealth();\r\n\tif (num2 <= 0f || num3 <= 0f)\r\n\t{\r\n\t\tOnRepairFailed(player, \"Unable to repair: Not damaged.\");\r\n\t\treturn;\r\n\t}\r\n\tList<ItemAmount> list = RepairCost(num3);\r\n\tif (list == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tfloat num4 = list.Sum((ItemAmount x) => x.amount);\r\n\tif (num4 > 0f)\r\n\t{\r\n\t\tfloat a = list.Min((ItemAmount x) => Mathf.Clamp01((float)player.inventory.GetAmount(x.itemid) / x.amount));\r\n\t\ta = Mathf.Min(a, 50f / num2);\r\n\t\tif (a <= 0f)\r\n\t\t{\r\n\t\t\tOnRepairFailedResources(player, list);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint num5 = 0;\r\n\t\tforeach (ItemAmount item in list)\r\n\t\t{\r\n\t\t\tint amount = Mathf.CeilToInt(a * item.amount);\r\n\t\t\tint num6 = player.inventory.Take(null, item.itemid, amount);\r\n\t\t\tif (num6 > 0)\r\n\t\t\t{\r\n\t\t\t\tnum5 += num6;\r\n\t\t\t\tplayer.Command(\"note.inv\", item.itemid, num6 * -1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfloat num7 = (float)num5 / num4;\r\n\t\thealth += num2 * num7;\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n\telse\r\n\t{\r\n\t\thealth += num2;\r\n\t\tSendNetworkUpdate();\r\n\t}\r\n\tif (Health() >= MaxHealth())\r\n\t{\r\n\t\tOnRepairFinished();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tOnRepair();\r\n\t}\r\n}\r\n",
    "OnTeamAcceptInvite (RelationshipManager_acceptinvite)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void acceptinvite(ConsoleSystem.Arg arg)\r\n{\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (!(basePlayer == null) && basePlayer.currentTeam == 0L)\r\n\t{\r\n\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(uLong);\r\n\t\tif (playerTeam == null)\r\n\t\t{\r\n\t\t\tbasePlayer.ClearPendingInvite();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tplayerTeam.AcceptInvite(basePlayer);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnTeamCreate (RelationshipManager_trycreateteam_OnTeamCreate)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void trycreateteam(ConsoleSystem.Arg arg)\r\n{\r\n\tif (maxTeamSize == 0)\r\n\t{\r\n\t\targ.ReplyWith(\"Teams are disabled on this server\");\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (basePlayer.currentTeam == 0L)\r\n\t{\r\n\t\tPlayerTeam playerTeam = ServerInstance.CreateTeam();\r\n\t\tplayerTeam.teamLeader = basePlayer.userID;\r\n\t\tplayerTeam.AddPlayer(basePlayer);\r\n\t}\r\n}\r\n",
    "OnTeamCreated (RelationshipManager_trycreateteam_OnTeamCreated)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void trycreateteam(ConsoleSystem.Arg arg)\r\n{\r\n\tif (maxTeamSize == 0)\r\n\t{\r\n\t\targ.ReplyWith(\"Teams are disabled on this server\");\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (basePlayer.currentTeam == 0L)\r\n\t{\r\n\t\tPlayerTeam playerTeam = ServerInstance.CreateTeam();\r\n\t\tplayerTeam.teamLeader = basePlayer.userID;\r\n\t\tplayerTeam.AddPlayer(basePlayer);\r\n\t}\r\n}\r\n",
    "OnTeamDisband (RelationshipManager_DisbandTeam_OnTeamDisband)": "using Facepunch;\r\n\r\npublic void DisbandTeam(PlayerTeam teamToDisband)\r\n{\r\n\tteams.Remove(teamToDisband.teamID);\r\n\tPool.Free(ref teamToDisband);\r\n}\r\n",
    "OnTeamDisbanded (RelationshipManager_DisbandTeam_OnTeamDisbanded)": "using Facepunch;\r\n\r\npublic void DisbandTeam(PlayerTeam teamToDisband)\r\n{\r\n\tteams.Remove(teamToDisband.teamID);\r\n\tPool.Free(ref teamToDisband);\r\n}\r\n",
    "OnTeamInvite (RelationshipManager_sendinvite)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void sendinvite(ConsoleSystem.Arg arg)\r\n{\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tPlayerTeam playerTeam = ServerInstance.FindTeam(basePlayer.currentTeam);\r\n\tif (playerTeam == null || playerTeam.GetLeader() == null || playerTeam.GetLeader() != basePlayer || !Physics.Raycast(basePlayer.eyes.position, basePlayer.eyes.HeadForward(), out var hitInfo, 5f, 1218652417, QueryTriggerInteraction.Ignore))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBaseEntity entity = hitInfo.GetEntity();\r\n\tif ((bool)entity)\r\n\t{\r\n\t\tBasePlayer component = entity.GetComponent<BasePlayer>();\r\n\t\tif ((bool)component && component != basePlayer && !component.IsNpc && component.currentTeam == 0L)\r\n\t\t{\r\n\t\t\tplayerTeam.SendInvite(component);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnTeamKick (RelationshipManager_kickmember)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void kickmember(ConsoleSystem.Arg arg)\r\n{\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (basePlayer == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tPlayerTeam playerTeam = ServerInstance.FindTeam(basePlayer.currentTeam);\r\n\tif (playerTeam != null && !(playerTeam.GetLeader() != basePlayer))\r\n\t{\r\n\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\tif (basePlayer.userID != uLong)\r\n\t\t{\r\n\t\t\tplayerTeam.RemovePlayer(uLong);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnTeamLeave (RelationshipManager_leaveteam)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void leaveteam(ConsoleSystem.Arg arg)\r\n{\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (!(basePlayer == null) && basePlayer.currentTeam != 0L)\r\n\t{\r\n\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(basePlayer.currentTeam);\r\n\t\tif (playerTeam != null)\r\n\t\t{\r\n\t\t\tplayerTeam.RemovePlayer(basePlayer.userID);\r\n\t\t\tbasePlayer.ClearTeam();\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnTeamPromote (RelationshipManager_promote)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void promote(ConsoleSystem.Arg arg)\r\n{\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (basePlayer.currentTeam == 0L)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBasePlayer lookingAtPlayer = GetLookingAtPlayer(basePlayer);\r\n\tif (!(lookingAtPlayer == null) && !lookingAtPlayer.IsDead() && !(lookingAtPlayer == basePlayer) && lookingAtPlayer.currentTeam == basePlayer.currentTeam)\r\n\t{\r\n\t\tPlayerTeam playerTeam = ServerInstance.teams[basePlayer.currentTeam];\r\n\t\tif (playerTeam != null && playerTeam.teamLeader == basePlayer.userID)\r\n\t\t{\r\n\t\t\tplayerTeam.SetTeamLeader(lookingAtPlayer.userID);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnTeamRejectInvite (RelationshipManager_rejectinvite)": "using UnityEngine;\r\n\r\n[ServerUserVar]\r\npublic static void rejectinvite(ConsoleSystem.Arg arg)\r\n{\r\n\tBasePlayer basePlayer = arg.Player();\r\n\tif (!(basePlayer == null) && basePlayer.currentTeam == 0L)\r\n\t{\r\n\t\tulong uLong = arg.GetULong(0, 0uL);\r\n\t\tPlayerTeam playerTeam = ServerInstance.FindTeam(uLong);\r\n\t\tif (playerTeam == null)\r\n\t\t{\r\n\t\t\tbasePlayer.ClearPendingInvite();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tplayerTeam.RejectInvite(basePlayer);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnTeamUpdate (BasePlayer_UpdateTeam)": "public void UpdateTeam(ulong newTeam)\r\n{\r\n\tcurrentTeam = newTeam;\r\n\tSendNetworkUpdate();\r\n\tif (RelationshipManager.ServerInstance.FindTeam(newTeam) == null)\r\n\t{\r\n\t\tClearTeam();\r\n\t}\r\n\telse\r\n\t{\r\n\t\tTeamUpdate();\r\n\t}\r\n}\r\n",
    "OnTeamUpdated (BasePlayer_TeamUpdate)": "using Facepunch;\r\nusing ProtoBuf;\r\nusing UnityEngine;\r\n\r\npublic void TeamUpdate()\r\n{\r\n\tif (!RelationshipManager.TeamsEnabled() || !IsConnected || currentTeam == 0L)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tRelationshipManager.PlayerTeam playerTeam = RelationshipManager.ServerInstance.FindTeam(currentTeam);\r\n\tif (playerTeam == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tint num = 0;\r\n\tint num2 = 0;\r\n\tusing PlayerTeam playerTeam2 = Pool.Get<PlayerTeam>();\r\n\tplayerTeam2.teamLeader = playerTeam.teamLeader;\r\n\tplayerTeam2.teamID = playerTeam.teamID;\r\n\tplayerTeam2.teamName = playerTeam.teamName;\r\n\tplayerTeam2.members = Pool.GetList<PlayerTeam.TeamMember>();\r\n\tplayerTeam2.teamLifetime = playerTeam.teamLifetime;\r\n\tforeach (ulong member in playerTeam.members)\r\n\t{\r\n\t\tBasePlayer basePlayer = RelationshipManager.FindByID(member);\r\n\t\tPlayerTeam.TeamMember teamMember = Pool.Get<PlayerTeam.TeamMember>();\r\n\t\tteamMember.displayName = ((basePlayer != null) ? basePlayer.displayName : (SingletonComponent<ServerMgr>.Instance.persistance.GetPlayerName(member) ?? \"DEAD\"));\r\n\t\tteamMember.healthFraction = ((basePlayer != null && basePlayer.IsAlive()) ? basePlayer.healthFraction : 0f);\r\n\t\tteamMember.position = ((basePlayer != null) ? basePlayer.transform.position : Vector3.zero);\r\n\t\tteamMember.online = basePlayer != null && !basePlayer.IsSleeping();\r\n\t\tteamMember.wounded = basePlayer != null && basePlayer.IsWounded();\r\n\t\tif ((!sentInstrumentTeamAchievement || !sentSummerTeamAchievement) && basePlayer != null)\r\n\t\t{\r\n\t\t\tif ((bool)basePlayer.GetHeldEntity() && basePlayer.GetHeldEntity().IsInstrument())\r\n\t\t\t{\r\n\t\t\t\tnum++;\r\n\t\t\t}\r\n\t\t\tif (basePlayer.isMounted)\r\n\t\t\t{\r\n\t\t\t\tif (basePlayer.GetMounted().IsInstrument())\r\n\t\t\t\t{\r\n\t\t\t\t\tnum++;\r\n\t\t\t\t}\r\n\t\t\t\tif (basePlayer.GetMounted().IsSummerDlcVehicle)\r\n\t\t\t\t{\r\n\t\t\t\t\tnum2++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (num >= 4 && !sentInstrumentTeamAchievement)\r\n\t\t\t{\r\n\t\t\t\tGiveAchievement(\"TEAM_INSTRUMENTS\");\r\n\t\t\t\tsentInstrumentTeamAchievement = true;\r\n\t\t\t}\r\n\t\t\tif (num2 >= 4)\r\n\t\t\t{\r\n\t\t\t\tGiveAchievement(\"SUMMER_INFLATABLE\");\r\n\t\t\t\tsentSummerTeamAchievement = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tteamMember.userID = member;\r\n\t\tplayerTeam2.members.Add(teamMember);\r\n\t}\r\n\tteamLeaderBuffer = FindByID(playerTeam.teamLeader);\r\n\tif (teamLeaderBuffer != null)\r\n\t{\r\n\t\tplayerTeam2.mapNote = teamLeaderBuffer.ServerCurrentMapNote;\r\n\t}\r\n\tClientRPCPlayerAndSpectators(null, this, \"CLIENT_ReceiveTeamInfo\", playerTeam2);\r\n\tplayerTeam2.mapNote = null;\r\n}\r\n",
    "OnBuyVendingItem (VendingMachine_BuyItem)": "[RPC_Server]\r\n[RPC_Server.IsVisible(3f)]\r\n[RPC_Server.CallsPerSecond(5uL)]\r\npublic void BuyItem(RPCMessage rpc)\r\n{\r\n\tif (OccupiedCheck(rpc.player))\r\n\t{\r\n\t\tint sellOrderId = rpc.read.Int32();\r\n\t\tint numberOfTransactions = rpc.read.Int32();\r\n\t\tif (IsVending())\r\n\t\t{\r\n\t\t\trpc.player.ShowToast(GameTip.Styles.Red_Normal, WaitForVendingMessage);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSetPendingOrder(rpc.player, sellOrderId, numberOfTransactions);\r\n\t\tInvoke(CompletePendingOrder, GetBuyDuration());\r\n\t}\r\n}\r\n",
    "OnAmmoSwitch (BaseProjectile_SwitchAmmoTo)": "[RPC_Server]\r\n[RPC_Server.IsActiveItem]\r\nprivate void SwitchAmmoTo(RPCMessage msg)\r\n{\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (!ownerPlayer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tint num = msg.read.Int32();\r\n\tif (num == primaryMagazine.ammoType.itemid)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tItemDefinition itemDefinition = ItemManager.FindItemDefinition(num);\r\n\tif (itemDefinition == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tItemModProjectile component = itemDefinition.GetComponent<ItemModProjectile>();\r\n\tif ((bool)component && component.IsAmmo(primaryMagazine.definition.ammoTypes))\r\n\t{\r\n\t\tif (primaryMagazine.contents > 0)\r\n\t\t{\r\n\t\t\townerPlayer.GiveItem(ItemManager.CreateByItemID(primaryMagazine.ammoType.itemid, primaryMagazine.contents, 0uL));\r\n\t\t\tprimaryMagazine.contents = 0;\r\n\t\t}\r\n\t\tprimaryMagazine.ammoType = itemDefinition;\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tItemManager.DoRemoves();\r\n\t\townerPlayer.inventory.ServerUpdate(0f);\r\n\t}\r\n}\r\n",
    "OnExplosiveDropped (ThrownWeapon_DoDrop)": "using UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsActiveItem]\r\nprivate void DoDrop(RPCMessage msg)\r\n{\r\n\tif (!HasItemAmount() || HasAttackCooldown())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tVector3 vector = msg.read.Vector3();\r\n\tVector3 normalized = msg.read.Vector3().normalized;\r\n\tif (msg.player.isMounted || msg.player.HasParent())\r\n\t{\r\n\t\tvector = msg.player.eyes.position;\r\n\t}\r\n\telse if (!ValidateEyePos(msg.player, vector))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBaseEntity baseEntity = GameManager.server.CreateEntity(prefabToThrow.resourcePath, vector, Quaternion.LookRotation(Vector3.up));\r\n\tif (baseEntity == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tif (canStick && Physics.SphereCast(new Ray(vector, normalized), 0.05f, out var hitInfo, 1.5f, 1236478737))\r\n\t{\r\n\t\tVector3 point = hitInfo.point;\r\n\t\tVector3 normal = hitInfo.normal;\r\n\t\tBaseEntity entity = hitInfo.GetEntity();\r\n\t\tCollider collider = hitInfo.collider;\r\n\t\tif ((bool)entity && entity is StabilityEntity && baseEntity is TimedExplosive)\r\n\t\t{\r\n\t\t\tentity = entity.ToServer<BaseEntity>();\r\n\t\t\tTimedExplosive obj = baseEntity as TimedExplosive;\r\n\t\t\tobj.onlyDamageParent = true;\r\n\t\t\tobj.DoStick(point, normal, entity, collider);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tbaseEntity.SetVelocity(normalized);\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tbaseEntity.SetVelocity(normalized);\r\n\t}\r\n\tbaseEntity.creatorEntity = msg.player;\r\n\tbaseEntity.skinID = skinID;\r\n\tbaseEntity.Spawn();\r\n\tSetUpThrownWeapon(baseEntity);\r\n\tStartAttackCooldown(repeatDelay);\r\n\tUseItemAmount(1);\r\n}\r\n",
    "OnExplosiveThrown (ThrownWeapon_DoThrow)": "using Rust;\r\nusing Rust.Ai;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.IsActiveItem]\r\nprivate void DoThrow(RPCMessage msg)\r\n{\r\n\tif (!HasItemAmount() || HasAttackCooldown())\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tVector3 vector = msg.read.Vector3();\r\n\tVector3 normalized = msg.read.Vector3().normalized;\r\n\tfloat num = Mathf.Clamp01(msg.read.Float());\r\n\tif (msg.player.isMounted || msg.player.HasParent())\r\n\t{\r\n\t\tvector = msg.player.eyes.position;\r\n\t}\r\n\telse if (!ValidateEyePos(msg.player, vector))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tBaseEntity baseEntity = GameManager.server.CreateEntity(prefabToThrow.resourcePath, vector, Quaternion.LookRotation((overrideAngle == Vector3.zero) ? (-normalized) : overrideAngle));\r\n\tif (baseEntity == null)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tbaseEntity.creatorEntity = msg.player;\r\n\tbaseEntity.skinID = skinID;\r\n\tbaseEntity.SetVelocity(GetInheritedVelocity(msg.player, normalized) + normalized * maxThrowVelocity * num + msg.player.estimatedVelocity * 0.5f);\r\n\tif (tumbleVelocity > 0f)\r\n\t{\r\n\t\tbaseEntity.SetAngularVelocity(new Vector3(Random.Range(-1f, 1f), Random.Range(-1f, 1f), Random.Range(-1f, 1f)) * tumbleVelocity);\r\n\t}\r\n\tbaseEntity.Spawn();\r\n\tSetUpThrownWeapon(baseEntity);\r\n\tStartAttackCooldown(repeatDelay);\r\n\tUseItemAmount(1);\r\n\tBasePlayer player = msg.player;\r\n\tif (!(player != null))\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tTimedExplosive timedExplosive = baseEntity as TimedExplosive;\r\n\tif (timedExplosive != null)\r\n\t{\r\n\t\tfloat num2 = 0f;\r\n\t\tforeach (DamageTypeEntry damageType in timedExplosive.damageTypes)\r\n\t\t{\r\n\t\t\tnum2 += damageType.amount;\r\n\t\t}\r\n\t\tSensation sensation = default(Sensation);\r\n\t\tsensation.Type = SensationType.ThrownWeapon;\r\n\t\tsensation.Position = player.transform.position;\r\n\t\tsensation.Radius = 50f;\r\n\t\tsensation.DamagePotential = num2;\r\n\t\tsensation.InitiatorPlayer = player;\r\n\t\tsensation.Initiator = player;\r\n\t\tsensation.UsedEntity = timedExplosive;\r\n\t\tSense.Stimulate(sensation);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tSensation sensation = default(Sensation);\r\n\t\tsensation.Type = SensationType.ThrownWeapon;\r\n\t\tsensation.Position = player.transform.position;\r\n\t\tsensation.Radius = 50f;\r\n\t\tsensation.DamagePotential = 0f;\r\n\t\tsensation.InitiatorPlayer = player;\r\n\t\tsensation.Initiator = player;\r\n\t\tsensation.UsedEntity = this;\r\n\t\tSense.Stimulate(sensation);\r\n\t}\r\n}\r\n",
    "OnFireBallDamage (FireBall_DoRadialDamage)": "using System.Collections.Generic;\r\nusing Facepunch;\r\nusing Rust;\r\nusing UnityEngine;\r\n\r\npublic void DoRadialDamage()\r\n{\r\n\tList<Collider> obj = Pool.GetList<Collider>();\r\n\tVector3 position = base.transform.position + new Vector3(0f, radius * 0.75f, 0f);\r\n\tVis.Colliders(position, radius, obj, AttackLayers);\r\n\tHitInfo hitInfo = new HitInfo();\r\n\thitInfo.DoHitEffects = true;\r\n\thitInfo.DidHit = true;\r\n\thitInfo.HitBone = 0u;\r\n\thitInfo.Initiator = ((creatorEntity == null) ? base.gameObject.ToBaseEntity() : creatorEntity);\r\n\thitInfo.PointStart = base.transform.position;\r\n\tforeach (Collider item in obj)\r\n\t{\r\n\t\tif (item.isTrigger && (item.gameObject.layer == 29 || item.gameObject.layer == 18))\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tBaseCombatEntity baseCombatEntity = item.gameObject.ToBaseEntity() as BaseCombatEntity;\r\n\t\tif (!(baseCombatEntity == null) && baseCombatEntity.isServer && baseCombatEntity.IsAlive() && (!ignoreNPC || !baseCombatEntity.IsNpc) && baseCombatEntity.IsVisible(position))\r\n\t\t{\r\n\t\t\tif (baseCombatEntity is BasePlayer)\r\n\t\t\t{\r\n\t\t\t\tEffect.server.Run(\"assets/bundled/prefabs/fx/impacts/additive/fire.prefab\", baseCombatEntity, 0u, new Vector3(0f, 1f, 0f), Vector3.up);\r\n\t\t\t}\r\n\t\t\thitInfo.PointEnd = baseCombatEntity.transform.position;\r\n\t\t\thitInfo.HitPositionWorld = baseCombatEntity.transform.position;\r\n\t\t\thitInfo.damageTypes.Set(DamageType.Heat, damagePerSecond * tickRate);\r\n\t\t\tbaseCombatEntity.OnAttacked(hitInfo);\r\n\t\t}\r\n\t}\r\n\tPool.FreeList(ref obj);\r\n}\r\n",
    "OnFireBallSpread (FireBall_TryToSpread)": "using UnityEngine;\r\n\r\npublic void TryToSpread()\r\n{\r\n\tfloat num = 0.9f - generation * 0.1f;\r\n\tif (Random.Range(0f, 1f) < num && spreadSubEntity.isValid)\r\n\t{\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(spreadSubEntity.resourcePath);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tbaseEntity.transform.position = base.transform.position + Vector3.up * 0.25f;\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t\tVector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(45f, Vector3.up);\r\n\t\t\tbaseEntity.creatorEntity = ((creatorEntity == null) ? baseEntity : creatorEntity);\r\n\t\t\tbaseEntity.SetVelocity(modifiedAimConeDirection * Random.Range(5f, 8f));\r\n\t\t\tbaseEntity.SendMessage(\"SetGeneration\", generation + 1f);\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnFlameThrowerBurn (FlameThrower_FlameTick)": "using UnityEngine;\r\n\r\npublic void FlameTick()\r\n{\r\n\tfloat num = Time.realtimeSinceStartup - lastFlameTick;\r\n\tlastFlameTick = Time.realtimeSinceStartup;\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif (!ownerPlayer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tReduceAmmo(num);\r\n\tSendNetworkUpdate();\r\n\tRay ray = ownerPlayer.eyes.BodyRay();\r\n\tVector3 origin = ray.origin;\r\n\tRaycastHit hitInfo;\r\n\tbool num2 = Physics.SphereCast(ray, 0.3f, out hitInfo, flameRange, 1218652417);\r\n\tif (!num2)\r\n\t{\r\n\t\thitInfo.point = origin + ray.direction * flameRange;\r\n\t}\r\n\tfloat num3 = (ownerPlayer.IsNpc ? npcDamageScale : 1f);\r\n\tfloat amount = damagePerSec[0].amount;\r\n\tdamagePerSec[0].amount = amount * num * num3;\r\n\tDamageUtil.RadiusDamage(ownerPlayer, LookupPrefab(), hitInfo.point - ray.direction * 0.1f, flameRadius * 0.5f, flameRadius, damagePerSec, 2279681, useLineOfSight: true);\r\n\tdamagePerSec[0].amount = amount;\r\n\tif (num2 && Time.realtimeSinceStartup >= nextFlameTime && hitInfo.distance > 1.1f)\r\n\t{\r\n\t\tnextFlameTime = Time.realtimeSinceStartup + 0.45f;\r\n\t\tVector3 point = hitInfo.point;\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(fireballPrefab.resourcePath, point - ray.direction * 0.25f);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tbaseEntity.creatorEntity = ownerPlayer;\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t}\r\n\t}\r\n\tif (ammo == 0)\r\n\t{\r\n\t\tSetFlameState(wantsOn: false);\r\n\t}\r\n\tGetOwnerItem()?.LoseCondition(num);\r\n}\r\n",
    "OnMagazineReload (BaseProjectile_ReloadMagazine)": "protected virtual void ReloadMagazine(int desiredAmount = -1)\r\n{\r\n\tBasePlayer ownerPlayer = GetOwnerPlayer();\r\n\tif ((bool)ownerPlayer)\r\n\t{\r\n\t\tprimaryMagazine.Reload(ownerPlayer, desiredAmount);\r\n\t\tSendNetworkUpdateImmediate();\r\n\t\tItemManager.DoRemoves();\r\n\t\townerPlayer.inventory.ServerUpdate(0f);\r\n\t}\r\n}\r\n",
    "OnWeaponFired (BaseProjectile_CLProject)": "using System.Linq;\r\nusing ConVar;\r\nusing Epic.OnlineServices.AntiCheatCommon;\r\nusing ProtoBuf;\r\nusing Rust;\r\nusing Rust.Ai;\r\nusing UnityEngine;\r\n\r\n[RPC_Server]\r\n[RPC_Server.FromOwner]\r\n[RPC_Server.IsActiveItem]\r\nprivate void CLProject(RPCMessage msg)\r\n{\r\n\tBasePlayer player = msg.player;\r\n\tif (!VerifyClientAttack(player))\r\n\t{\r\n\t\tSendNetworkUpdate();\r\n\t\treturn;\r\n\t}\r\n\tif (reloadFinished && HasReloadCooldown())\r\n\t{\r\n\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Reloading (\" + base.ShortPrefabName + \")\");\r\n\t\tplayer.stats.combat.LogInvalid(player, this, \"reload_cooldown\");\r\n\t\treturn;\r\n\t}\r\n\treloadStarted = false;\r\n\treloadFinished = false;\r\n\tif (primaryMagazine.contents <= 0 && !UsingInfiniteAmmoCheat)\r\n\t{\r\n\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Magazine empty (\" + base.ShortPrefabName + \")\");\r\n\t\tplayer.stats.combat.LogInvalid(player, this, \"ammo_missing\");\r\n\t\treturn;\r\n\t}\r\n\tItemDefinition primaryMagazineAmmo = PrimaryMagazineAmmo;\r\n\tProjectileShoot projectileShoot = ProjectileShoot.Deserialize(msg.read);\r\n\tif (primaryMagazineAmmo.itemid != projectileShoot.ammoType)\r\n\t{\r\n\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Ammo mismatch (\" + base.ShortPrefabName + \")\");\r\n\t\tplayer.stats.combat.LogInvalid(player, this, \"ammo_mismatch\");\r\n\t\treturn;\r\n\t}\r\n\tif (!UsingInfiniteAmmoCheat)\r\n\t{\r\n\t\tprimaryMagazine.contents--;\r\n\t}\r\n\tItemModProjectile component = primaryMagazineAmmo.GetComponent<ItemModProjectile>();\r\n\tif (component == null)\r\n\t{\r\n\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Item mod not found (\" + base.ShortPrefabName + \")\");\r\n\t\tplayer.stats.combat.LogInvalid(player, this, \"mod_missing\");\r\n\t}\r\n\telse if (projectileShoot.projectiles.Count > component.numProjectiles)\r\n\t{\r\n\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Count mismatch (\" + base.ShortPrefabName + \")\");\r\n\t\tplayer.stats.combat.LogInvalid(player, this, \"count_mismatch\");\r\n\t}\r\n\telse\r\n\t{\r\n\t\tif (player.InGesture)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tSignalBroadcast(Signal.Attack, string.Empty, msg.connection);\r\n\t\tplayer.CleanupExpiredProjectiles();\r\n\t\tforeach (ProjectileShoot.Projectile projectile in projectileShoot.projectiles)\r\n\t\t{\r\n\t\t\tif (player.HasFiredProjectile(projectile.projectileID))\r\n\t\t\t{\r\n\t\t\t\tAntiHack.Log(player, AntiHackType.ProjectileHack, \"Duplicate ID (\" + projectile.projectileID + \")\");\r\n\t\t\t\tplayer.stats.combat.LogInvalid(player, this, \"duplicate_id\");\r\n\t\t\t}\r\n\t\t\telse if (ValidateEyePos(player, projectile.startPos))\r\n\t\t\t{\r\n\t\t\t\tplayer.NoteFiredProjectile(projectile.projectileID, projectile.startPos, projectile.startVel, this, primaryMagazineAmmo);\r\n\t\t\t\tCreateProjectileEffectClientside(component.projectileObject.resourcePath, projectile.startPos, projectile.startVel, projectile.seed, msg.connection, IsSilenced());\r\n\t\t\t}\r\n\t\t}\r\n\t\tplayer.MakeNoise(player.transform.position, BaseCombatEntity.ActionVolume.Loud);\r\n\t\tplayer.stats.Add(component.category + \"_fired\", projectileShoot.projectiles.Count(), (Stats)5);\r\n\t\tplayer.LifeStoryShotFired(this);\r\n\t\tStartAttackCooldown(ScaleRepeatDelay(repeatDelay) + animationDelay);\r\n\t\tplayer.MarkHostileFor();\r\n\t\tUpdateItemCondition();\r\n\t\tDidAttackServerside();\r\n\t\tfloat num = 0f;\r\n\t\tif (component.projectileObject != null)\r\n\t\t{\r\n\t\t\tGameObject gameObject = component.projectileObject.Get();\r\n\t\t\tif (gameObject != null)\r\n\t\t\t{\r\n\t\t\t\tProjectile component2 = gameObject.GetComponent<Projectile>();\r\n\t\t\t\tif (component2 != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tforeach (DamageTypeEntry damageType in component2.damageTypes)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tnum += damageType.amount;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfloat num2 = NoiseRadius;\r\n\t\tif (IsSilenced())\r\n\t\t{\r\n\t\t\tnum2 *= AI.npc_gun_noise_silencer_modifier;\r\n\t\t}\r\n\t\tSensation sensation = default(Sensation);\r\n\t\tsensation.Type = SensationType.Gunshot;\r\n\t\tsensation.Position = player.transform.position;\r\n\t\tsensation.Radius = num2;\r\n\t\tsensation.DamagePotential = num;\r\n\t\tsensation.InitiatorPlayer = player;\r\n\t\tsensation.Initiator = player;\r\n\t\tSense.Stimulate(sensation);\r\n\t\tif (EACServer.CanSendAnalytics && player.net.connection != null)\r\n\t\t{\r\n\t\t\tusing (TimeWarning.New(\"EAC.LogPlayerShooting\"))\r\n\t\t\t{\r\n\t\t\t\tVector3 networkPosition = player.GetNetworkPosition();\r\n\t\t\t\tQuaternion networkRotation = player.GetNetworkRotation();\r\n\t\t\t\tItem item = GetItem();\r\n\t\t\t\tstring text = ((item != null) ? item.info.shortname : \"unknown\");\r\n\t\t\t\tLogPlayerUseWeaponOptions options = default(LogPlayerUseWeaponOptions);\r\n\t\t\t\tLogPlayerUseWeaponData value = default(LogPlayerUseWeaponData);\r\n\t\t\t\tvalue.PlayerHandle = EACServer.GetClient(player.net.connection);\r\n\t\t\t\tvalue.PlayerPosition = new Vec3f\r\n\t\t\t\t{\r\n\t\t\t\t\tx = networkPosition.x,\r\n\t\t\t\t\ty = networkPosition.y,\r\n\t\t\t\t\tz = networkPosition.z\r\n\t\t\t\t};\r\n\t\t\t\tvalue.PlayerViewRotation = new Quat\r\n\t\t\t\t{\r\n\t\t\t\t\tw = networkRotation.w,\r\n\t\t\t\t\tx = networkRotation.x,\r\n\t\t\t\t\ty = networkRotation.y,\r\n\t\t\t\t\tz = networkRotation.z\r\n\t\t\t\t};\r\n\t\t\t\tvalue.WeaponName = text;\r\n\t\t\t\toptions.UseWeaponData = value;\r\n\t\t\t\tEACServer.Interface.LogPlayerUseWeapon(ref options);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n",
    "OnWorldPrefabSpawned (World_Spawn)": "using System;\r\nusing System.Collections;\r\nusing System.Diagnostics;\r\nusing UnityEngine;\r\n\r\npublic static IEnumerator Spawn(float deltaTime, Action<string> statusFunction = null)\r\n{\r\n\tStopwatch sw = Stopwatch.StartNew();\r\n\tfor (int i = 0; i < Serialization.world.prefabs.Count; i++)\r\n\t{\r\n\t\tif (sw.Elapsed.TotalSeconds > (double)deltaTime || i == 0 || i == Serialization.world.prefabs.Count - 1)\r\n\t\t{\r\n\t\t\tStatus(statusFunction, \"Spawning World ({0}/{1})\", i + 1, Serialization.world.prefabs.Count);\r\n\t\t\tyield return CoroutineEx.waitForEndOfFrame;\r\n\t\t\tsw.Reset();\r\n\t\t\tsw.Start();\r\n\t\t}\r\n\t\tSpawn(Serialization.world.prefabs[i]);\r\n\t}\r\n}\r\n",
    "OnFlameExplosion (FlameExplosive_FlameExplode)": "using UnityEngine;\r\n\r\npublic void FlameExplode(Vector3 surfaceNormal)\r\n{\r\n\tif (!base.isServer)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tCollider component = GetComponent<Collider>();\r\n\tif ((bool)component)\r\n\t{\r\n\t\tcomponent.enabled = false;\r\n\t}\r\n\tfor (int i = 0; (float)i < numToCreate; i++)\r\n\t{\r\n\t\tVector3 position = base.transform.position;\r\n\t\tBaseEntity baseEntity = GameManager.server.CreateEntity(createOnExplode.resourcePath, position);\r\n\t\tif ((bool)baseEntity)\r\n\t\t{\r\n\t\t\tfloat num = (float)i / numToCreate;\r\n\t\t\tVector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(spreadAngle * spreadCurve.Evaluate(num), surfaceNormal);\r\n\t\t\tbaseEntity.transform.SetPositionAndRotation(position, Quaternion.LookRotation(modifiedAimConeDirection));\r\n\t\t\tbaseEntity.creatorEntity = ((creatorEntity == null) ? baseEntity : creatorEntity);\r\n\t\t\tbaseEntity.Spawn();\r\n\t\t\tVector3 vector = modifiedAimConeDirection.normalized * Random.Range(minVelocity, maxVelocity) * velocityCurve.Evaluate(num * Random.Range(1f, 1.1f));\r\n\t\t\tFireBall component2 = baseEntity.GetComponent<FireBall>();\r\n\t\t\tif (component2 != null)\r\n\t\t\t{\r\n\t\t\t\tcomponent2.SetDelayedVelocity(vector);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tbaseEntity.SetVelocity(vector);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tbase.Explode();\r\n}\r\n"
  }
}